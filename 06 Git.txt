Git 中文件的状态
	未跟踪：Untracked 表示该文件未被 Git 管理。
	已修改：modified 表示在工作区已修改了该文件，但还没有将其添加到暂存区中。
	已暂存：staged 表示将已修改的该文件添加到了暂存区，已使它包含在下次提交的列表中。
	已提交：committed 表示将已修改的该文件提交到了本地 Git 仓库中。

Git 工作流程
	1、在工作区中修改文件。
	2、将想要提交的更改进行暂存。
	3、找到暂存区的快照文件，将其提交到 Git 仓库。

设置全局开发者信息
	git config --global user.name 'XXX'
	git config --global user.email 'XXX'
	注意：全局开发者信息被写入到 C:/Users/李杰/.gitconfig 文件中，这个文件是 Git 的全局配置文件，可以用记事本打开。

查看全局开发者信息
	1、查看所有的全局配置项。
		git config --list --global
	2、查看指定的全局配置项。
		git config user.name
		git config user.email

获取帮助信息
	git help <verb>
	git help -h

获取 Git 仓库的方式
	1、将尚未进行版本控制的本地目录转换为 Git 仓库。
		1、在项目根目录中，通过鼠标右键打开 Git Bash。
		2、执行 git init 命令将当前目录转化为 Git 仓库。
		注意：git init 命令会创建一个名为 .git 的隐藏目录，这个目录就是当前项目的 Git 仓库。
	2、从其他服务器克隆一个已存在的 Git 仓库。
		见后

忽略文件
	在项目根目录下创建 .gitignore 配置文件。
	配置文件的语法：
		1、以 # 开头的是注释。
		2、以 / 结尾的是目录。
		3、以 / 开头的是防止递归。
		4、以 ! 开头的是取反。
		5、可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）。
			1、* 匹配零个或多个任意字符。
			2、? 匹配一个任意字符。
			3、[abc] 匹配 a b c 中的一个字符。
			4、[0-9] 匹配 0 到 9 中的一个数字。
			5、a/**/z 匹配 a 目录和其子目录下的所有的 z 文件。
	案例：
		# 忽略所有的 .a 文件。
		*.a
		# 跟踪所有的 lib.a 文件，即使在前面忽略了所有的 .a 文件。
		!lib.a
		# 只忽略当前目录下的 b 文件，而不忽略其他目录下的 b 文件。
		/b
		# 忽略任何目录下的 build 文件夹。
		build/
		# 忽略 doc 目录下的所有文件，但不忽略 doc 目录下的文件夹。
		doc/*.txt
		# 忽略 doc 目录和其子目录下的所有 .pdf 文件。
		doc/**/*.pdf



=========================================================================================================================================================================================



开源项目托管平台
	专门用于免费存放开源项目源代码的网站，叫做开源项目托管平台。目前主流的有三个：Github、Gitlab、Gitee。
	Github：全球最牛的开源项目托管平台。
	Gitlab：对代码私有性支持较好，企业用户较多。
	Gitee：又叫做码云，国产的开源项目托管平台。

新建空白远程仓库
	略

远程仓库的访问方式
	HTTPS
		无需进行配置，但是每次访问远程仓库时，需要重复输入 Github 账号和密码。
	SSH
		需要进行配置，每次访问远程仓库时，不需要重复输入 Github 账号和密码。
	注意：在实际开发中，推荐使用 SSH 的方式访问远程仓库。

基于 HTTPS 将本地仓库上传到 Github
	1、本地没有现成的 Git 仓库。
		1、使用终端命令创建 README.md 文档，并向其写入初始内容“# 项目名”。
			echo "# 项目名" >> README.md
		2、初始化本地仓库，并将文件的修改提交到本地仓库。
			git init
			git add README.md
			git commit -m "first commit"
		3、将本地仓库和远程仓库进行关联，并把远程仓库命名为 origin。
			git remote add origin HTTPS链接
		4、将本地仓库的内容推送到远程 origin 仓库中。
			git push -u origin master			// 第一次推送必须这么写。
	2、本地有现成的 Git 仓库。
		1、将本地仓库和远程仓库进行关联，并把远程仓库命名为 origin。
			git remote add origin HTTPS链接
		2、将本地仓库的内容推送到远程 origin 仓库中。
			git push -u origin master			// 第一次推送必须这么写。

SSH key
	作用：实现本地仓库和 Github 之间免登录的加密数据传输。
	好处：免登录身份认证、数据加密传输。
	组成：
		1、id_rsa 私钥文件，存放于客户端的电脑中。
		2、id_rsa.pub 公钥文件，需要配置到 Github 中。
	生成：
		1、打开 Git Bash。
		2、粘贴如下的命令。
			ssh-keygen -t rsa -b 4096 -C 'Github 账号的邮箱'
		3、连续敲击四次回车键，即可在 C:\Users\李杰\.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件。
	配置：
		1、使用记事本打开 id_rsa.pub 文件，复制里面的文本内容。
		2、在浏览器中登录 Github，点击头像->Settings->SSH and GPG Keys->New SSH key。
		3、将 id_rsa.pub 文件中的内容，粘贴到 Key 对应的文本框中。
		4、在 Title 文本框中任意填写一个名称，来标识这个 Key 从何而来。
		5、打开 Git Bash 输入 “ssh -T git@github.com” 命令，检测是否配置成功。

基于 SSH 将本地仓库上传到 Github
	步骤和 HTTPS 一样。

将远程仓库克隆到本地
	打开 Git Bash 输入 “git clone 远程仓库地址” 命令并回车执行。

master 分支
	在初始化本地 Git 仓库的时候，Git 默认已经帮助我们创建了一个名字叫做 master 的分支，通常我们将这个分支叫做主分支。
	在实际工作中，master 分支的作用是：用来保存和记录整个项目已完成的功能代码。
	因此，不允许程序员直接在 master 分支上修改代码，因为这样做的风险太高，容易导致整个项目崩溃。

功能分支
	功能分支指的是专门用来开发新功能的分支，它是临时从 master 主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到 master 分支上。

Git 工作流
	feature：新功能分支。一个新功能对应一个分支。由 develop 分支而来，并且合并到 develop 分支中去。
	develop：主开发分支。开发时用的分支。
		此分支代码会在开发阶段完毕后被复制到 release 分支。
	release：发布分支。测试时用的分支。
		此分支代码会在测试完毕后被复制到 master 和 develop 分支。
	debug：补丁分支。用于修复在测试阶段发现的 bug。由 release 分支而来，并且合并到 release 分支中去。
	master：主分支。用于真实环境上线的分支。
		此分支代码会在线上严重紧急 bug 被修复后被重新复制到 release 和 develop 分支。
	hotfix：热补丁分支。用于修复在线上版本中发现的严重紧急 bug。由 master 分支而来，并且合并到 master 分支中去。



=========================================================================================================================================================================================



查看分支列表
	git branch							// 查看本地仓库的分支列表。
	git remote show origin						// 查看远程仓库的分支列表。

拉取远程分支的最新代码
	git pull

以当前分支为基准创建新的目标分支
	git branch 目标分支名

切换分支到目标分支
	git checkout 目标分支名						// 工作区和暂存区有修改的文件时会切换失败。
	git checkout -b 目标分支名 = git branch 目标分支名 + git checkout 目标分支名

用当前分支合并本地目标分支
	git merge 目标分支

用当前分支合并远程目标分支
	git merge origin/目标分支

将本地分支推送到远程仓库
	1、第一次将本地分支推送到远程仓库。
		git push -u origin 本地分支名:远程分支名		// -u 表示将本地分支和远程分支进行关联。
		git push -u origin 本地分支名				// 让被关联的远程分支和本地分支的名称相同。
	2、不是第一次将本地分支推送到远程仓库。
		git push

将远程分支下载到本地仓库
	1、保持本地分支和远程分支名称相同。
		git checkout 远程分支名称
	2、对下载的分支进行重命名。
		git checkout -b 本地分支名称 origin/远程分支名称

删除本地目标分支
	git branch -d 目标分支名					// 先切换到其他分支，再删除该分支。代码未合并到 master 则无法删除。
	git branch -D 目标分支名					// 先切换到其他分支，再删除该分支。代码未合并到 master 也可以删除。

删除远程目标分支
	git push origin --delete 目标分支名

查看修改文件的状态
	git status
	git status -s
	git status --short

撤销对工作区文件的修改
	git merge 文件全名

从暂存区中移除对应的文件
	git reset HEAD 文件全名
	git reset HEAD .

删除项目的文件
	git rm -f 文件全名						// 从 Git 仓库中和工作区中同时移除对应的文件。
	git rm --cached 文件全名					// 从 Git 仓库中，不从工作区中，移除对应的文件。

将工作区修改的文件提交到暂存区
	git add 文件全名
	git add ./
	git add .
	git add *

将暂存区的文件提交到本地仓库
	git commit -m '说明'

将工作区修改的文件提交到本地仓库
	git commit --a -m '说明'
	git commit --all -m '说明'

在当前版本中查看以前版本代码的提交日志
	git log								// 按时间先后顺序列出所有的提交历史，最近的提交排在最上面。
	git log -2							// 只展示最新的两条提交记录，数字可以按需进行填写。
	git log -2 --pretty=oneline					// 在一行上展示最新的两条提交历史的信息。
	git log -2 --pretty=format:"%h | %an | %ar | %s"		// 在一行上展示最新的两条提交历史的信息，并自定义输出格式。%h：提交的简写哈希值；%an：作者的名字；%ar：多久以前修订；%s：提交的说明。

在当前版本中查看所有版本代码的提交日志
	git reflog
	git reflog --pretty=oneline

代码回退到指定的版本
	git reset --hard 版本号



==========================================================================================================================================================================================



操作流程
	1、确认分支。
		git branch -a						// shift + : + q

	2、确认修改的文件。
		git status

	3、拉取远程分支的代码。
		git pull						// git fetch
		git merge origin/develop

	4、将工作区代码提交到暂存区。
		git add + 路径

	5、添加日志，将暂存区代码提交到本地仓库。
		git commit -m '内容'

	6、拉取远程分支的代码。
		git pull						// git fetch
		git merge origin/develop

	7、将本地仓库的代码推送至远程分支。
		git push