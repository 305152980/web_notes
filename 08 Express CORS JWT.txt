Express 简介
	概念：
		Express 是基于 Node.js 平台的一个快速、开放、极简的 Web 开发框架。
		注意：
			Express 就是一个 npm 上的第三方包。
			Express 的作用和 Node.js 内置 http 模块的功能类似。	
	应用：使用 Express 可以方便快捷的创建 Web 网站服务器或 API 接口服务器。
		Web 网站服务器：对外提供 Web 网页资源的服务器。
		API 接口服务器：对外提供 API 接口的服务器。
	安装：在项目所处的目录中，运行 npm install express@版本号 命令。
	基本用法：
		// 在文件中导入 Express。
		const express = require('express');
		// 在文件中创建 Web 服务器。
		const app = express();
		// 配置解析请求体数据的中间件。
		app.use(express.urlencoded({ extended: false }));
		app.use(express.json());
		// 监听客户端的 GET 请求。
		//	req：请求对象，包含了与请求相关的属性和方法。
		//	res：响应对象，包含了与响应相关的属性和方法。
		app.get('请求的 URL', function(req, res) {
			// 获取请求 URL 中携带的查询参数。req.query 默认情况下是空对象。
			console.log(req.query);
			// 获取请求 URL 中携带的动态参数。req.params 默认情况下是空对象。eg：/user/:id/:name。
			console.log(req.params);
			// 向客户端发送 JSON 对象。
			res.send({ name: 'zs', age: 20, gender: '男' });
		});	
		// 监听客户端的 POST 请求。
		app.post('请求 URL', function(req, res) {
			// 获取请求体中携带的数据。req.body 默认情况下是空对象。
			console.log(req.body);
			// 向客户端发送文本内容。
			res.send('请求成功！');
		});
		// 启动 Web 服务器。
		app.listen(8080, () => {
			console.log('Express server running at http://127.0.0.1');
		});
	托管静态资源
		通过 express.static() 方法，可以将一个目录创建为一个静态资源服务器。
		用法：
			app.use(express.static('路径 + 目录名1'));
			app.use(express.static('路径 + 目录名2'));
			注意：
				访问静态资源文件时，express.static() 方法会根据目录托管的顺序依次查找所需要的文件。
				Express 会自动在指定的静态资源目录中查找文件，因此存放静态资源目录的目录名不会出现在资源访问的 URL 中。
		挂载静态资源访问路径前缀
			app.use('路径前缀', express.static('路径 + 目录名'));
			注意：这样访问静态资源的 URL 就是 HTTP协议 + 域名 + 端口号 + 路径前缀 + 文件名。
	nodemon 工具
		作用：nodemon 可以监听项目文件的变动，这样当代码修改后 nodemon 会自动帮助我们重启项目，方便我们的开发和调试。
		安装 nodemon
			npm install -g nodemon
		用法：
			启动项目：
				nodemon 文件名
Express 路由
	在 Express 中，路由指的是客户端的请求与服务器的处理函数之间的映射关系。
	Express 中的路由包括 3 个组成部分，分别是：请求的类型、请求的 URL 地址和请求的处理函数。代码示例如下：
		app.METHOD(PATH, HANDLER);
	路由模块化
		为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块。
		抽离路由的步骤：
			1、创建路由模块对应的 .js 文件；
			2、调用 express.Router() 方法创建路由对象；
				const express = require('express');
				const router = express.Router();
			3、向路由对象上挂载具体的路由；
				router.METHOD(PATH, HANDLER);
			4、使用 module.exports 向外共享路由对象；
				module.exports = router;
			5、在服务器模块文件中，导入路由模块。然后使用 app.use() 方法注册路由模块，并为路由模块添加统一访问前缀。
				const router = require('./router.js');
				app.use('路径前缀', router);
Express 接口
	代码示例如下：
		// apiRouter.js 文件中的路由模块代码
		const express = require('express');
		const router = express.Router();
		router.get('请求 URL', function(req, res) {
			const query = req.query;
			res.send({
				status: 0,
				msg: 'GET 请求成功！',
				data: query
			});
		});
		router.post('请求 URL', function(req, res) {
			const body = req.body;
			res.send({
				status: 0,
				msg: 'POST 请求成功！',
				data: body
			});
		});
		module.exports = router;
		// apiExpress.js 中的服务器模块代码
		const express = require('express');
		const router = require('./apiRouter.js');
		const app = express();
		app.use(express.urlencoded({ extended: false }));
		app.use('路径前缀', router);	
		app.listen(8080, () => {
			console.log('Express server running at http://127.0.0.1');
			});
Express 中间件
	Express 中间件就是对请求和响应进行预处理的拦截器和过滤器，本质上是一个 function 函数。
	中间件的特点：
		1、多个中间件之间共享同一份 req 和 res 对象；
		2、上一个中间件的输出是下一个中间件的输入。
	中间件的基本使用：
		const express = require('express');
		const app = express();
		const mw = function(req, res, next) {
			next();
		}
		app.METHOD(PATH, mw, HANDLER);		// 请求之前先调用 mw 中间件对请求进行预处理。
		app.listen(8080, () => {
			console.log('Express server running at http://127.0.0.1');
		});
		注意：
			1、中间件的形参列表中，必须包含 next 参数；
			2、next() 方法是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件。
	全局生效的中间件
		客户端发起任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件。
			// 常量 mw 所指向的，就是一个中间件。
			const mw = function(req, res, next) {
				console.log('这是全局生效的中间件。');
				next();
			}
			// 通过调用 app.use(中间件) 方法，即可注册一个全局生效的中间件。
			app.use(mw);
		注意：可以使用 app.use() 方法连续注册多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用。
	局部生效的中间件
		不使用 app.use() 方法注册的中间件，叫做局部生效的中间件，此种中间件只在特定的请求和响应中被触发。
			const express = require('express');
			const app = express();
			const mw = function(req, res, next) {
				console.log('这是局部生效的中间件。');
				next();
			}
			app.get(PATH, mw, HANDLER);
			app.post(PATH, HANDLER);
			app.listen(8080, () => {
				console.log('Express server running at http://127.0.0.1');
			});
		注意：在注册多个局部生效的中间件时，以下两种写法是完全等价的。
			app.get(PATH, mw1, mw2, HANDLER);
			app.get(PATH, [mw1, mw2], HANDLER);
	中间件使用注意事项
		1、一定要在路由之前注册中间件，错误级别的中间件除外；
		2、客户端发送过来的请求，可以连续调用多个中间件进行预处理；
		3、执行完中间件的业务代码之后，不要忘记调用 next() 方法；
		4、为了防止代码逻辑混乱，调用 next() 方法后，不要再写额外的代码。
	Express 中间件分类
		应用级别的中间件
			通过 app.use() 或 app.METHOD() 挂载到 app 实例上的中间件，叫做应用级别的中间件。
		路由级别的中间件
			绑定到 express.Router() 实例上的中间件，叫做路由级别的中间件。代码示例如下：
				// 定义导出中间件
				const express = require('express');
				const router = express.Router();
				const mw = function(req, res, next) {
					console.log('这是路由级别的中间件。');
					next();
				}
				router.use(mw);
				router.METHOD(PATH, HANDLER);
				module.exports = router;
				// 导入挂载中间件
				const router = require('./router.js');
				app.use('路径前缀', router);
		错误级别的中间件
			专门用来捕获整个项目发生的异常的中间件，叫做错误级别的中间件。代码格式：
				const mw = function(err, req, res, next) {
					console.log('这是错误级别的中间件。');
					next();
				}
			代码示例：
				const express = require('express');
				const app = express();
				app.METHOD(PATH, function(req, res) {
					// 服务器的处理函数中抛出异常
					throw new Error('服务器内部发生了错误。');
					res.send('Home Page.');
				});
				const mw = function(err, req, res, next) {
					console.log('发生了错误：' + err.message);
					res.send('发生了错误：' + err.message);
				}
				app.use(mw);
				app.listen(8080, () => {
					console.log('Express server running at http://127.0.0.1');
				});
			注意：错误级别的中间件，必须注册在所有的路由之后。
		Express 的内置中间件
			express.static()
				作用：快速托管静态资源，例如：HTML 文件、图片和 CSS 文件等。
				代码示例：
					app.use('路径前缀', express.static('路径 + 目录名'));
			express.json()
				作用：解析 JSON 格式的请求体数据。
				代码示例：
					// 配置解析 application/json 格式数据的中间件。
					app.use(express.json());
					app.post('请求 URL', function(req, res) {
						// 获取请求体中携带的数据。req.body 默认情况下是空对象。
						console.log(req.body);
						// 向客户端发送文本内容。
						res.send('请求成功！');
					});
				注意：如果没有配置解析请求体的中间件，那么 req.body 的值为 undefined。
			express.urlencoded()
				作用：解析 URL-encoded 格式的请求体数据。
				代码示例：
					// 配置解析 application/x-www-form-urlencoded 格式数据的中间件。
					app.use(express.urlencoded({ extended: false }));
					app.post('请求 URL', function(req, res) {
						// 获取请求体中携带的数据。req.body 默认情况下是空对象。
						console.log(req.body);
						// 向客户端发送文本内容。
						res.send('请求成功！');
					});
				注意：如果没有配置解析请求体的中间件，那么 req.body 的值为 undefined。
			自定义 express.urlencoded()
				const qs = require('querystring');
				// 1、挂载中间件。
				app.use(function(req, res, next) {
					var str = '';
					// 2、监听 req 的 data 事件。
					req.on('data', function(chunk) {
						str += chunk;
					});
					// 3、监听 req 的 end 事件。
					req.on('end', function() {
						// 4、使用 querystring 模块解析请求体数据。
						const body = qs.parse(str);
						// 5、将解析出来的数据对象挂在到 req.body。
						req.body = body;
						next();
					});
				});
				注意：
					1、在中间件中，需要 req 对象的 data 事件，来获取客户端发送到服务器的数据。如果数据量大，客户端会把数据切割后，分批发送到服务器。
					所以 data 事件可能会触发多次，每触发一次 data 事件，获取的数据只是完整数据的一部分，需要我们手动的对接收到的数据进行拼接。
					2、当请求体数据接收完毕后，会自动触发 req 对象的 end 事件，因此我们可以在 req 对象的 end 事件中，拿到完整的请求体数据。
					3、Node.js 内置了一个 querystring 模块，专门用来处理查询字符串。通过这个模块提供的 parse() 方法，可以将查询字符串解析为对象格式。
		Express 的第三方中间件
			第三方开发出来的中间件，叫做 Express 的第三方中间件。
			body-parser
				作用：解析请求体数据。
				使用步骤：
					1、运行如下命令安装中间件；
						npm install body-parser
					2、使用 require() 方法导入中间件；
						const parser = require('body-parser');
					3、调用 app.use() 注册中间件。
						app.use(parser.urlencoded({ extended: false }));
				注意：Express 内置的 express.urlencoded() 中间件，是基于 body-parser 第三方中间件封装出来的。



CORS 技术
	CORS 由一系列 HTTP 响应头字段组成，这些 HTTP 响应头字段决定了浏览器是否阻止前端 JS 的跨域获取资源。
	使用步骤：
		1、运行命令安装中间件；
			npm install cors
		2、使用 require() 方法导入中间件；
			const cors = require('cors');
		3、在路由之前使用 app.use() 方法注册中间件。
			app.use(cors());
		注意事项：
			1、CORS 主要在服务器进行配置，客户端无需做任何额外的配置；
			2、CORS 在浏览器中有兼容性，只有支持 XHRLevel2 的浏览器；（例如：IE10+、Chrome4+、FireFox3.5+ 等）
			3、CORS 跨域资源共享详解见：http://www.ruanyifeng.com/blog/2016/04/cors.html 。
	HTTP 响应头字
		Access-Control-Allow-Origin
			服务器可通过该字段的设置告诉客户端浏览器，可以允许哪些外域 URL 跨域请求资源。
			res.setHeader('Access-Control-Allow-Origin', 'URL' | '*');
				URL：表示允许指定的外域 URL 可以跨域请求资源;
				*：表示允许所有外域  URL 都可以跨域请求资源。
		Access-Control-Request-Headers
			服务器可通过该字段的设置告诉客户端浏览器，此响应头部中包含了普通响应头字段之外的特殊响应头字段。
			res.setHeader('Access-Control-Request-Headers', 'Content-Type, X-Custom-Header');
		Access-Control-Request-Method
			默认情况下 CORS 仅支持客户端发起的 GET、POST、HEAD 跨域请求。如果客户端有发起其他类型跨域请求的需要，则需要在服务器通过该字段进行设置。
			res.setHeader('Access-Control-Request-Method', 'GET, POST, DELETE, HEAD' | '*');
	注意：如果 Express 项目中配置了 CORS 中间件，为了防止冲突必须在 CORS 中间件之前声明 JSONP 接口。因为 Express 项目中配置了 CORS 中间件之后挂载的接口，都会被处理成是开启了 CORS 资源共享的接口。



身份认证技术
	会话技术
		会话：
			客户端首次给服务器发送资源请求时，会话建立；客户端服务器任何一方断开连接时，会话终止。
			一次会话中包含多次请求和响应，在一次会话范围内的多次请求相互之间可以数据共享。
		分类：
			客户端会话技术：Cookie。
			服务器端会话技术：Session。存储用户登录状态。
		express-session 中间件的使用
			1、在 Express 项目中安装 express-session 中间件：
				npm install express-session
			2、通过 app.use() 方法注册 express-session 中间件：
				const session = require('express-session');
				app.use(session({
					secret: 'keyboard cat',			// 负责对 session 进行加密的任意字符串
					resave: false,				// 固定写法
					saveUninitialized: true			// 固定写法
				}))；
				注意：当 express-session 中间件挂载成功后，req 对象中便有了 session 属性。
			3、向 session 中存数据
				可通过 req.session 来访问 session 对象，来存储用户的相关信息。
			4、向 session 中取数据
				可通过 req.session 来访问 session 对象，来获取用户的相关信息。
			5、清空 session 数据
				用户退出登录的时候可通过 req.session.destroy() 方法来清空用户的相关信息。
		会话技术的局限性
			Cookie 默认不支持跨域访问，需要做很多额外的配置，才能支持跨域访问。
			注意：
				当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制；
				当前端请求后端接口存在跨域问题的时候，推荐使用 JWT 身份认证机制。
	JWT 技术
		JWT 全称 JSON Web Token，是目前最流行的跨域认证解决方案。
		组成：
			JWT 通常由三部分组成，分别是：Header（头部）、Payload（有效荷载）、Signature（签名）。三者之间使用英文的点号链接。
			Payload 部分存储的是真正的用户信息，它是用户信息经过加密之后生成的字符串；Header 和 Signature 是与安全性相关的部分，只是为了保证 JWT 的安全性。
		使用方式
			服务器返回给客户端的 JWT 信息通常存储在浏览器的 LocalStorage 或 SessionStorage 中；
			此后浏览器每次和客户端通信，都要携带上这个 JWT 字符串，从而进行身份认证；
			推荐的做法是把 JWT 信息放在 HTTP 请求头的 Authorization 字段中，传递给服务器。
		Express 项目中使用 JWT
			1、在 Express 项目中安装相关中间件；
				npm install jsonwebtoken express-jwt
				其中：jsonwebtoken 包用于生成 JWT 字符串，express-jwt 包用于将 JWT 字符串解析还原成 JSON 对象。
			2、导入 jsonwebtoken express-jwt 包；
				const jwt = require('jsonwebtoken');
				const expressJWT = require('express-jwt');
			3、定义 secret 密钥；
				const secretKey = 'keyboard cat';
				注意：secret 密钥是用于对 JWT 进行加解密的，它可以是任意字符串。
			4、用户登录成功后，服务器生成 JWT 字符串，并在接口响应中将其返回给客户端；
				const tokenStr = jwt.sign({ /*用户信息对象*/ }, secretKey, { expiresIn: '30s' });
					// expiresIn：tokenStr 的有效时间。
				注意：在实际项目中，建议 tokenStr 中的加密信息只包含用户名和用户的登录状态等信息，而不要包含用户的密码信息。
			5、在服务器挂载 express-jwt 中间件，来对客户端发来的请求进行身份鉴权；
				app.use(expressJWT({ secret: secretKey }.unless({ path: [/^\/api\//] })));
					// expressJWT({ secret: secretKey }：用来解析 tokenStr 的中间件；
					// .unless({ path: [/^\/api\//] })：用来指定哪些接口不需要进行身份鉴权。
				注意：如果请求的权限验证得到通过，则 req 对象上就会被挂载一个 user 对象，这个对象是用户登录时被 jwt 加密的用户登录信息。
			6、使用 req.user 来获取用户的登录信息；
			7、捕获解析 JWT 失败后产生的异常。
				app.use((err, req, res, next) => {
					if(err.name === 'UhauthorizedError') {
						return res.send({ status: 401, message: '无效的 token。' });
					}
					// 其它异常的处理。
					......
				});
	
	