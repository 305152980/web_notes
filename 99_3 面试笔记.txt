*** 浏览器原理
	浏览器如何解析选择器的？
		浏览器解析选择器是从右往左解析的。相比于从左往右解析，大幅度节约了遍历查找所消耗的性能。
			selector1 selector2 selector3 {
				......
			}
		先遍历一边 DOM 树，查找到 selector3 对应的 DOM 节点，然后去此 DOM 节点的父节点中查找 selector2 和 selector1 对应的节点。
		从左往右解析的话就需要多次重复的遍历 DOM 树。
	浏览器如何进行页面的渲染？
		1、获取 HTML 文件并进行解析，生成一颗 DOM 树；
		2、解析 HTML 文件的同时也会解析 CSS 样式，生成一份样式规则；
		3、根据 DOM 树和样式规则，生成一颗渲染树；
		4、根据渲染树进行布局（重排），为每个节点分配一个在屏幕上的确切坐标位置；
		5、根据渲染树进行绘制（重绘），调用 GPU 将每个节点上的元素呈现出来。
	浏览器的重绘和重排（回流）。
		重排
			重排是指部分或整个渲染树需要重新分析，并且节点的尺寸需要重新计算。表现为重新生成布局，重新排列元素。
		重绘
			重绘是由于节点的几何属性发生改变，或节点的样式属性改变，而导致的节点被重新渲染。
		两者的关系
			重绘不一定会出现重排，重排必定会触发重绘。这两者的性能消耗代价都很高。
		何时会触发重排？
			1、添加或者删除可见的 DOM 元素。
			2、DOM 元素的位置发生了改变。
			3、DOM 元素的尺寸发生了改变。
			4、当文本字体大小或者图片大小的改变引起了 DOM 元素的尺寸发生改变的时候，也会触发重排。
			5、页面的初始化渲染。
			6、浏览器窗口尺寸的改变。
		何时触发重绘？
			1、改变了影响布局的样式，只会触发重绘。
			2、页面改变了布局，触发了重排之后，也会触发重绘。
	浏览器对重排和重绘的性能优化。
		浏览器会维护一个队列，把所有会引起重排、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，
		浏览器会 flush 这个队列，对队列中的操作进行一个批处理，这样就会让多次的重排、重绘变成一次的重排、重绘，进而优化了浏览器的响应性能。
		提前触发这个队列 flush 的场景：
			1、当向浏览器获取一些样式信息的时候，为了保证获取结果的准确性，浏览器会让这个队列提前 flush。
				1、offsetTop、offsetLeft、offsetWidth、offsetHeight。
				2、scrollTop、scrollLeft、scrollWidth、scrollHeight。
				3、clientTop、clientLeft、clientWidth、clientHeight。
				4、请求了 getComputedStyle()。
				5、......
			2、当一次宏任务和微任务执行完毕后，浏览器也会 flush 这个队列。
	如何从重排和重绘的角度对项目性能进行优化？
		优化原理：尽可能减少重绘和重排的次数。
		具体方法：
			1、集中修改样式。
			2、尽量避免在循环中向浏览器进行元素的样式值的获取操作。
			3、利用 transform 来实现动画效果，去代替 left top 的变换。
				因为 transform 变换只会触发自身元素的重绘，不会影响到其他 DOM 元素。
			4、使用文档碎片（DocumentFragment）进行 DOM 元素的批量处理和创建。



** JS 性能优化
	垃圾回收机制
		两种对象
			可达对象：可以被访问到的对象。
			垃圾对象：不能被访问到的对象。
		GC（垃圾回收）算法
			引用计数算法
				引用计数是计算机编程语言中的一种内存管理技术，是指将资源的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。
				优点：发现垃圾立即回收，效率高。
				缺点：无法回收循环引用的对象；算法的时间开销比较大。
			标记清除算法
				标记: Collector 从引用根结点开始遍历，标记所有被引用的对象。一般是在对象的 Header 中将其记录为可达对象。
				清除: Collector 对堆内存从头到尾进行线性遍历，如果发现某个对象在其 Header 中没有可达对象的标记，则将其垃圾回收。
				优点：解决了循环引用对象无法被回收的问题。
				缺点：
					1、效率不算高；
					2、在进行垃圾回收的时候，需要停止整个应用程序，导致用户体验性差；
					3、这种方式清理出来的空闲内存是不连续的，会产生内存碎片。需要额外维护一个碎片列表。
			标记整理算法
				标记阶段的逻辑和标记清除算法的标记阶段相同，不同的是标记整理算法在标记阶段后不是直接清除垃圾对象，而是首先将存活对象移向内存的一端，然后清除端边界外的垃圾对象。
				优点：解决了内存碎片化的问题。
				缺点：比标记清除算法效率更低。
		V8 引擎
			V8 引擎使用 C++ 开发，并在谷歌等浏览器中使用。JavaScript 程序在 V8 引擎下的运行速度媲美二进制程序。
			V8 引擎高性能的原因：
				1、优秀的内存管理机制；
				2、内存设定有上限，这样在垃圾回收的时候，浏览器不会卡顿；
				3、采用即时编译方式，把 JS 代码转换成可以直接发送给处理器的机器码。
			垃圾分代回收
				新生代
					步骤一：
						在 from 区分配对象的内存空间。
					步骤二：
						在 from 区对所有的存活对象进行算法标记。
					步骤三：
						将 from 区所有被标记的存活对象复制到 to 区。
					步骤四：
						原 to 区变为现 from 区，原 from 区变为现 to 区，继续下一轮现 from 区对象的内存分配。
				晋升
					当一个对象经过多次复制后仍然存活，会被认为是生命周期较长的对象，进而会被移动到老生代中，这种过程叫做晋升。
					晋升的条件：
						1、对象从 from 空间复制到 to 空间时，会检查它的内存地址以此来判断这个对象，是否已经经历过一次垃圾整理回收。
						如果已经经历过，则会将该对象从 from 空间复制到老生代空间中去；如果没有，则会复制到 to 空间中去。
						2、如果 to 空间的使用率已经超过了 25%，则剩下的待复制对象都会被复制到老生代空间中去，这样以保证后续新生代中对象的内存分配不受影响。
				老生代
					主要使用标记清除算法进行垃圾回收，在空间不足的时候会使用标记整理算法进行垃圾回收。
	编码中的注意点
		全局变量问题
			原则：尽量减少全局变量的使用。
			原因：
				1、全局变量的查找消耗时间；
				2、全局变量一直存储在内存中，降低了内存的使用空间。
		代码层级问题
			代码的层级尽量要少，这样性能会高一些。
		作用域的问题
			尽量减少变量作用域查找的层级，从而减少查找的性能。
		循环的问题
			将外部的变量缓存到循环代码块中，不用每次循环的时候都去外部取值。
		闭包的问题
			闭包的代码会让变量不容易被回收，从而容易产生内存泄露的问题，使用时应该尽量避免内存的泄露。
			闭包代码段的特点：
				1、外部具有指向内部的引用；
				2、在外部作用域中可以访问内部作用域中的数据。
	DOM 性能优化
		对 DOM 查询操作进行数据缓存。
			const length = document.getElementsByTagName("p").length;
			for (let i = 0; i < length; i++) {}
		利用文档片段将多次 DOM 操作合并为一次 DOM 操作。
			<ul id="list"></ul>
			const listNode = document.getElementById("list");
			const frag = document.createDocumentFragment();
			for (let i = 0; i < 10; i++) {
				const li = document.createElement("li");
				li.innerHTML = `item${i}`;
				frag.appendChild(li);
			}
			listNode.appendChild(frag);
		


*** Vue 核心原理
	数据响应式
		响应式分类
			vue2.x 属性劫持
				实现原理
					对象类型：通过 Object.defineProperty() 方法对对象属性的读写进行拦截。
						Object.defineProperty(data, 'count', {
							get() {}, 
							set() {}
						})
					数组类型：通过重写数组的方法来实现对数组的读写进行拦截。
				存在的问题
					对象类型：新增、删除对象的属性，界面不会更新。
					数组类型：通过下标修改数组的元素，界面不会更新。
			vue3.x 对象代理
				实现原理
					Proxy:  拦截目标对象中任意属性的变化。包括：属性的读写、添加、删除等。
					Reflect:  对目标对象的属性进行直接操作。
				代码示例
					new Proxy(data, {
						// 读取目标对象属性的拦截方法。
						get (target, prop) {
							return Reflect.get(target, prop);
						},
						// 设置目标对象属性或添加目标对象属性的拦截方法。
						set (target, prop, value) {
							return Reflect.set(target, prop, value);
						},
						// 删除目标对象属性的拦截方法。
						deleteProperty (target, prop) {
							return Reflect.deleteProperty(target, prop);
						}
					});
				解决的问题
					上述 vue2.x 中存在的问题都被解决了。
		Object.defineProperty(obj, prop, descriptor)
			基础用法：
				const dataName = {};
				let _propName = undefined;
				Object.defineProperty(dataName, 'propName', {
					// 当访问 dataName 的 propName 属性的时候自动调用的方法，并且此函数的返回值就是访问时获取到的值。
					get(){
						console.log('get');
						// dataName 对象中的 propName 属性值就是这里的返回值。
						return _propName;
					},
					// 当设置 dataName 的 propName 属性的时候自动调用的方法，并且此函数的形参值就是设置时被写入的值。
					set(newValue){
						console.log('set');
						if(newValue === _propName) { return }
						// 必须这么写，才能正确设置 dataName 的 propName 属性。
						_propName = newValue;
						// 视图渲染逻辑。
						......
					}
				}); 
				dataName.propName = 'name';	// 触发 set()
				console.log(dataName.propName);		// 触发 get()
				console.log(dataName);
				注意：set() 和 get() 函数中不能直接访问或者设置 dataName 对象中的 propName 属性，否则会报栈溢出错误。
			通用用法：
				const dataName = data();
				// 引入发布订阅模式。
				// eventName 是 dataName 对象中的属性名。
				const Dep = {
					eventMap: {},
					collect: function(eventName, fn) {
						if(!this.eventMap[eventName]) {
							this.eventMap[eventName] = [];	
						}
						this.eventMap[eventName].push(fn);
					},
					trigger: function(eventName) {
						this.eventMap[eventName].forEach(fn => fn());
					}
				};
				// 初始化视图的数据和初始化 Dep 数据。
				compile();
				function compile() {
					// 根据“v-”指令找到 DOM 结构，获取到相应的 nodeArr 节点数组。
					......
					for(let i = 0; i < nodeArr.length; i++) {
						// nodeName 是 nodeArr[i] 节点中“v-”指令的指令名。
						// nodeValue 是 nodeArr[i] 节点中“v-”指令的属性值。
						if(nodeName === 'v-text') {
							nodeArr[i].innerText = dataName[nodeValue];
							// 运用闭包保存响应式操作的逻辑。发布订阅模式实现变量视图的一对多响应。（提升效率）
							Dep.collect(nodeValue, () => {
								nodeArr[i].innerText = dataName[nodeValue];
							});
						} else (nodeName === 'v-model') {
							nodeArr[i].value = dataName[nodeValue];
							// 运用闭包保存响应式操作的逻辑。发布订阅模式实现变量视图的一对多响应。（提升效率）
							Dep.collect(nodeValue, () => {
								nodeArr[i].value = dataName[nodeValue];
							});
							// 视图响应数据的逻辑。
							nodeArr[i].addEventListener('input', (e) => {
								dataName[nodeValue] = e.target.value;
							});
						}
					}
				}
				// 将 data() 函数中的数据包装成响应式数据。
				Object.keys(dataName).forEach((key) => {
					observe(dataName, key, dataName[key]);
				});
				function observe(dataName, key, value) {
					Object.defineProperty(dataName, key, {
						get(){
							return value;
						},
						set(newValue){
							if(newValue === value) { return }
							value = newValue;
							// 触发视图渲染。
							Dep.trigger(key);
						}
					}); 
				}
				注意：
					1、函数的形参等价于函数内部初始值为 undefined 的变量；
					2、调用函数传入实参的时候相当于在给对应的形参变量做赋值操作；
					3、上面这段代码被称为 Vue 的数据劫持，在此基础上 Vue 还对处理后的 dataName 进行了数据代理，将 dataName 中的属性全部代理到 Vue 的实例对象上。
		let proxy = new Proxy(target, handler)
			参数：
				target：需要被代理的目标对象；
				proxy：代理 target 的代理对象；
				handler：proxy 对象代理 target 对象时的拦截操作。
				注意：handler 对象也可以为 {} 空对象，相当于不设置拦截操作，进而可以直接访问目标对象。
			代码示例
				let target = {
					name: 'Tom',
					age: 24
				};
				let handler = {
					get: function(target, key) {
						console.log('getting ' + key);
						return target[key];		// 不是 target.key
					},
					set: function(target, key, value) {
						console.log('setting ' + key);
						target[key] = value;
					}
				}
				let proxy = new Proxy(target, handler);
				proxy.name;					// 实际执行 handler.get
				proxy.age = 25;					// 实际执行 handler.set
			实际应用
				1、对象属性的校验。
					class Person {
						constructor() {
							this.name = '';
							this.age = 0;
							return validator(this, personValidators)
						}
					}
					const personValidators = {
						name: function(value) { return typeof value === 'string' },
						age: function(value) { return typeof value === 'number' }
					}
					funcrion validator(target, validator) {
						return new Proxy(target, {
							_validator: validator,
							set: function(target, key, value) {
								if(target.hasOwnProperty(key)) {
									let valid = this._validator[key];
									if(!valid || valid(value)) {
										return Reflect.set(target, key, value)
									} else {
										throw new Error(`不能给 ${key} 属性设置 ${value} 值。`)
									}	
								} else {
									trow new Error(`${key} 属性不存在。`)
								}
							}
						})
					}
				2、实现 vue3.x 的数据响应式。
				3、实现属性的私有。
	虚拟 DOM 和 diff 算法
		Vue 初次渲染页面时
			1、Vue 依据 Vue 实例对象的模板结构嵌套调用 snabbdom 插件中的 h 函数，以此来在内存中生成对应的虚拟 DOM 树对象；
			2、然后将此虚拟 DOM 树对象渲染并挂载到页面上的 #app 结点（实际上替换掉了 #app 结点）。
		Vue 更新渲染页面时
			1、Vue 依据 Vue 实例对象的新模板结构嵌套调用 snabbdom 插件中的 h 函数，再一次在内存中生成对应新的虚拟 DOM 树对象；
			2、如果新旧虚拟 DOM 树根节点的标签名和 id 相同，那么 diff 算法会将该虚拟 DOM 树视为同一颗树，继而递归调用 diff 算法对新旧虚拟 DOM 树的虚拟 DOM 子树进行依次对比；
			3、如果新旧虚拟 DOM 树不是同一棵树，则新的真实 DOM 树会被渲染并插入到旧的真实 DOM 树的前面，然后旧的真实 DOM 树被删除。
		注意：diff 算法的核心原理是同层同类虚拟节点之间才会进行相互比较。
	
		



