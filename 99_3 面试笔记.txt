HTTP
	HTTP
		请求消息
			HTTP 的请求消息又叫做 HTTP 的请求报文。
			HTTP 的请求消息由请求行、请求头、空行和请求体 4 个部分组成。
			请求行：由请求方式、URL 和 HTTP 协议版本 3 个部分组成，它们之间使用空格隔开。
			请求头：由多行键值对组成，每行键值对之间用英文的冒号分割。用来描述客户端的基本信息。
				User-Agent：用来说明当前是什么类型的浏览器。
				Conten-Type：用来描述发送到服务器的数据格式。
				Accept：用来描述客户端能够接受什么类型的返回类容，例如：图片、网页等。
				Accept-Language：用来描述客户端期望接收哪种人类语言的文本类容。
			空行：最后一个请求头字段的后面是一个空行，告诉服务器请求头到此结束。
			请求体：只有 post 请求才有请求体，请求体中存放的是提交到服务器的数据。	
		响应消息
			HTTP 的响应消息又叫做 HTTP 的响应报文。
			HTTP 的响应消息由状态行、响应头、空行和响应体 4 个部分组成。
			状态行：由 HTTP 协议版本、状态码和状态码的描述文本 3 个部分组成，它们之间使用空格隔开。
			响应头：由多行键值对组成，每行键值对之间用英文的冒号分割。用来描述服务器的基本信息。	
			空行：最后一个响应头字段的后面是一个空行，告诉浏览器响应头到此结束。
			响应体：存放的是服务器响应给客户端的资源内容。
		请求方法
			用来表明客户端要对服务器上的资源所执行的操作，分为 get 和 post 等。
		响应状态码
			用来标识响应的状态。
			HTTP 响应状态码由三个十进制数字组成，第一个十进制数字定义了响应状态码的类型，后两个数字用来对响应状态码进行细分。
			1**：信息，服务器收到请求，需要请求者继续执行操作。
			2**：成功，表示操作被成功接受并处理。
				200 OK 请求成功。一般用于 get 和 post 请求。
				201 Created 已创建。成功请求并创建了新的资源。一般用于 post 和 put 请求。
			3**：重定向，表示服务器要求客户端重定向，需要客户端进一步的操作以完成请求。
				301 Moved Permanently 永久移动。请求的资源已被永久的移动到新的 URL。返回的信息包括新的 URL。客户端今后的请求应使用新的 URL。
				302 Found 临时移动。请求的资源被临时的移动到新的 URL。返回的信息包括新的 URL。下一次客户端通过浏览器缓存的 URL 继续访问该资源。
				304 Not Modified 未移动。返回的信息没有响应体，没有资源返回。客户端通过浏览器缓存的 URL 继续访问该资源。
			4**：客户端错误，表示请求包含语法错误或非法内容，从而导致了这次响应的失败。
				400 Bad Request 1、语义有误，除非进行修改，否则客户端不应重复提交该请求；2、请求参数有误。
				401 Unauthorized 当前请求需要用户验证。
				403 Forbidden 服务器已经理解请求，但是拒绝执行它。
				404 Not Found 服务器无法根据客户端的请求找到资源。
				408 Request Timeout 请求超时，服务器等待客户端发送的请求时间过长。
			5**：服务器错误，表示服务器在处理请求的过程中发生了错误。
				500 Internal Server 服务器内部错误，无法完成请求。
				501 Not Implemented 服务器不支持该请求方法。
				503 Service Unavailable 由于超载或系统维护，服务器暂时无法处理客户端的请求。
	一次 HTTP 请求的完整过程
		1、根据浏览器中的 URL 请求和 DNS 域名服务器，解析出服务器的 IP 地址；
		2、浏览器对服务器发起 TCP 3 次握手；
		3、浏览器和服务器建立 TCP 连接后，浏览器向服务器发起 HTTP 请求报文；
		4、服务器将此 HTTP 请求的响应报文返回给浏览器；
		5、短连接的情况下，浏览器和服务器通过 TCP 四次挥手关闭连接；长连接的情况下，在浏览器没有访问服务器的若干时间后，他们的连接会自动关闭；
		6、浏览器解析出响应信息中的 HTML 代码， 并继续请求 HTML 代码中的资源（如 js、css、图片等）；
		7、浏览器对此 HTML 代码进行页面渲染并呈现给用户。
	HTTP 缓存控制
		强缓存
			资源在有效期内都有效，过了有效期就失效的缓存。
			如果命中了此种缓存，浏览器是不会向服务器发送请求的。
		协商缓存
			强缓存的资源过期后，浏览器向服务器发送请求。
			如果该资源没有变化，则服务器会响应浏览器代码 304，并重新将这个资源标一个过期时间。
			如果该资源已经变化，则服务器会响应浏览器代码 200，并返回新的资源。
				资源是否变化的判断依据之一是资源的最后修改日期。（日期会有精确度的问题，比如说一秒内修改多次。）
	HTTP 的 keep-alive
		后期的 HTTP1.0 以及 HTTP1.1 中，在请求头中加入 Connection: keep-alive 字段，可以让请求响应完后自身链接不被关闭，下次还复用这次请求的链接进行会话通信。
		缺点：
			在请求结束后，本来可以释放的链接资源仍然被占用。
		解决办法：
			在请求头中加入 Keep-Alive: timeout = 5, max = 100。
			timeout：两次请求间的最大间隔时间。
			max：该链接最多被复用的次数。
	HTTP2 相比 HTTP1.X 的优势。
		特点：充分利用网络带宽，超级快。
		1、HTTP2 采用二进制格式来传输数据，而 HTTP1.X 采用的是文本格式传输的数据，二进制协议解析起来更高效；
		2、HTTP2 采用了一些头部压缩技术，减少了在请求头和响应头中重复携带的数据，降低了网络负担；
		3、HTTP2 采用了服务器推送方式，主动向客户端推送资源，提高了页面的加载效率；（用的比较少）
		4、HTTP2 采用了多路复用技术，减少了需要创建链接的数量，降低了资源占用和性能消耗。
			HTTP2 建立一次链接可以并发 n 个请求和响应，而 HTTP1.X 中建立一次链接只能发送一个请求和响应；
			HTTP2 同一时间建立链接的数量远超 HTTP1.X 的 6 个。
	HTTPS 协议
		什么是 HTTPS 协议？
			HTTP 协议通常承载于 TCP 协议之上，在 HTTP 和 TCP 之间添加一个安全协议层（SSL 或 TSL），这个时候就成了我们常说的 HTTPS 协议。
		1、为什么需要 HTTPS 协议？
			因为 HTTP 协议是明文传输的，数据容易被截取，而 HTTPS 协议会对某些敏感数据进行加密处理。
		2、HTTPS 协议是如何对数据进行加密的？
			HTTPS 协议采用的是“对称加密”和“非对称加密”相结合的方式对数据进行加密的。
			敏感数据采用对称加密方式进行加密传输，对称加密的密钥采用非对称加密的方式进行加密传输。
		3、对称加密。
			对称加密采用的是同一个密钥进行的加解密。加密成本低。
		4、非对称加密。
			非对称加密采用的是不同的密钥进行的加解密。加密成本高。
		5、如何保证非对称加密公钥明文传输的安全性？
			数字证书（CA 证书），一般是 CA 机构颁发的，可以用来证明这个网站是可靠的。
			CA 证书中包含了网站的公钥、域名地址还有证书的到期时间等信息。
			访问没有 CA 证书或者 CA 证书过期的网站，浏览器会发出警告。
			有了 CA 证书的服务器不会再响应明文的公钥给用户，而是响应 CA 证书给用户。
		6、数字签名。
			数字签名可以用来证明 CA 证书是否伪造或者被篡改。
			原理：数字签名 是由 CA 证书里面的信息通过 hash 算法进行加密得来的一个唯一标识，可以理解为身份证的身份证号码。
	


浏览器原理
	浏览器如何解析选择器的？
		浏览器解析选择器是从右往左解析的。相比于从左往右解析，大幅度节约了遍历查找所消耗的性能。
			selector1 selector2 selector3 {
				......
			}
		先遍历一边 DOM 树，查找到 selector3 对应的 DOM 节点，然后去此 DOM 节点的父节点中查找 selector2 和 selector1 对应的节点。
		从左往右解析的话就需要多次重复的遍历 DOM 树。
	浏览器如何进行页面的渲染？
		1、获取 HTML 文件并进行解析，生成一颗 DOM 树；
		2、解析 HTML 文件的同时也会解析 CSS 样式，生成一份样式规则；
		3、根据 DOM 树和样式规则，生成一颗渲染树；
		4、根据渲染树进行布局（重排），为每个节点分配一个在屏幕上的确切坐标位置；
		5、根据渲染树进行绘制（重绘），调用 GPU 将每个节点上的元素呈现出来。
	浏览器的重绘和重排（回流）。
		重排
			重排是指部分或整个渲染树需要重新分析，并且节点的尺寸需要重新计算。表现为重新生成布局，重新排列元素。
		重绘
			重绘是由于节点的几何属性发生改变，或节点的样式属性改变，而导致的节点被重新渲染。
		两者的关系
			重绘不一定会出现重排，重排必定会触发重绘。这两者的性能消耗代价都很高。
		何时会触发重排？
			1、添加或者删除可见的 DOM 元素。
			2、DOM 元素的位置发生了改变。
			3、DOM 元素的尺寸发生了改变。
			4、当文本字体大小或者图片大小的改变引起了 DOM 元素的尺寸发生改变的时候，也会触发重排。
			5、页面的初始化渲染。
			6、浏览器窗口尺寸的改变。
		何时触发重绘？
			1、改变了影响布局的样式，只会触发重绘。
			2、页面改变了布局，触发了重排之后，也会触发重绘。
	浏览器对重排和重绘的性能优化。
		浏览器会维护一个队列，把所有会引起重排、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，
		浏览器会 flush 这个队列，对队列中的操作进行一个批处理，这样就会让多次的重排、重绘变成一次的重排、重绘，进而优化了浏览器的响应性能。
		提前触发这个队列 flush 的场景：
			1、当向浏览器获取一些样式信息的时候，为了保证获取结果的准确性，浏览器会让这个队列提前 flush。
				1、offsetTop、offsetLeft、offsetWidth、offsetHeight。
				2、scrollTop、scrollLeft、scrollWidth、scrollHeight。
				3、clientTop、clientLeft、clientWidth、clientHeight。
				4、请求了 getComputedStyle()。
				5、......
			2、当一次宏任务和微任务执行完毕后，浏览器也会 flush 这个队列。
	如何从重排和重绘的角度对项目性能进行优化？
		优化原理：尽可能减少重绘和重排的次数。
		具体方法：
			1、集中修改样式。
			2、尽量避免在循环中向浏览器进行元素的样式值的获取操作。
			3、利用 transform 来实现动画效果，去代替 left top 的变换。
				因为 transform 变换只会触发自身元素的重绘，不会影响到其他 DOM 元素。
			4、使用文档碎片（DocumentFragment）进行 DOM 元素的批量处理和创建。
	前端如何实现即时通信的？
		SSE
			是一种基于 HTTP 协议，允许服务端向客户端推送新数据的 HTML5 技术。
			通信原理：
				客户端发起请求，服务器响应给客户端的是持续不断的数据流信息。
			优点：基于 HTTP 协议，无需太多的改造就能使用，相对于 WebSocket 简单一些。
			缺点：基于文本传输，效率没有 WebSocket 高；基于 HTTP 协议，不是严格的双向通信技术。
		WebSocket
			基于 TCP 协议，它可以在服务器和浏览器之间建立实时的双向通信。
			优点：性能好，延时低。
			缺点：使用起来复杂一些，通常需要引入一些库（如：Socket-io），并且无法兼容低版本的浏览器。



JS 性能优化
	可达对象：可以被访问到的对象。
	垃圾对象：不能被访问到的对象。
	GC（垃圾回收） 算法
		引用计数算法
			引用计数是计算机编程语言中的一种内存管理技术，是指将资源的被引用次数保存起来，当被引用次数变为零时就将其释放的过程。
			优点：发现垃圾立即回收，效率高。
			缺点：无法回收循环引用的对象；算法的时间开销比较大。
		标记清除算法
			标记: Collector 从引用根结点开始遍历，标记所有被引用的对象。一般是在对象的 Header 中将其记录为可达对象。
			清除: Collector 对堆内存从头到尾进行线性遍历，如果发现某个对象在其 Header 中没有可达对象的标记，则将其垃圾回收。
			优点：解决了循环引用对象无法被回收的问题。
			缺点：
				1、效率不算高；
				2、在进行垃圾回收的时候，需要停止整个应用程序，导致用户体验性差；
				3、这种方式清理出来的空闲内存是不连续的，会产生内存碎片。需要额外维护一个碎片列表。
		标记整理算法
			标记阶段的逻辑和标记清除算法的标记阶段相同，不同的是标记整理算法在标记阶段后不是直接清除垃圾对象，而是首先将存活对象移向内存的一端，然后清除端边界外的垃圾对象。
			优点：解决了内存碎片化的问题。
			缺点：比标记清除算法效率更低。
	V8 引擎
		V8 引擎使用 C++ 开发，并在谷歌等浏览器中使用。JavaScript 程序在 V8 引擎下的运行速度媲美二进制程序。
		V8 引擎高性能的原因：
			1、优秀的内存管理机制；
			2、内存设定有上限，这样在垃圾回收的时候，浏览器不会卡顿；
			3、采用即时编译方式，把 JS 代码转换成可以直接发送给处理器的机器码。
		垃圾分代回收
			新生代
				步骤一：
					在 from 区分配对象的内存空间。
				步骤二：
					在 from 区对所有的存活对象进行算法标记。
				步骤三：
					将 from 区所有被标记的存活对象复制到 to 区。
				步骤四：
					原 to 区变为现 from 区，原 from 区变为现 to 区，继续下一轮现 from 区对象的内存分配。
			晋升
				当一个对象经过多次复制后仍然存活，会被认为是生命周期较长的对象，进而会被移动到老生代中，这种过程叫做晋升。
				晋升的条件：
					1、对象从 from 空间复制到 to 空间时，会检查它的内存地址以此来判断这个对象，是否已经经历过一次垃圾整理回收。
					如果已经经历过，则会将该对象从 from 空间复制到老生代空间中去；如果没有，则会复制到 to 空间中去。
					2、如果 to 空间的使用率已经超过了 25%，则剩下的待复制对象都会被复制到老生代空间中去，这样以保证后续新生代中对象的内存分配不受影响。
			老生代
				主要使用标记清除算法进行垃圾回收，在空间不足的时候会使用标记整理算法进行垃圾回收。
	全局变量问题
		原则：尽量减少全局变量的使用。
		原因：
			1、全局变量的查找消耗时间；
			2、全局变量一直存储在内存中，降低了内存的使用空间。
	代码层级问题
		代码的层级尽量要少，这样性能会高一些。
	作用域的问题
		尽量减少变量作用域查找的层级，从而减少查找的性能。
	循环的问题
		将外部的变量缓存到循环代码块中，不用每次循环的时候都去外部取值。
	闭包的问题
		闭包的代码会让变量不容易被回收，从而容易产生内存泄露的问题，使用时应该尽量避免内存的泄露。
		闭包代码段的特点：
			1、外部具有指向内部的引用；
			2、在外部作用域中可以访问内部作用域中的数据。



JS
	怎么判断变量是否为空？
		null || undefined
			obj == null;
		{}
			function isEmpty(obj) {
				for(var key in obj) {
					if(obj.hasOwnProperty(key)) {
						return false;
					}
				}
				return true;
			}
		[]
			arr intanceof Array && arr.length === 0;
		''
			str === '';
	字符串
		字符串的创建方式以及它们之间的区别。
			1、字符串字面量。
				var str = 'hello word';
			2、String()。
				var str = String(true);			// 'true'
			3、new String()。
				var str = new String(hello word);	// 'hello word'
			三者的区别：
				字符串字面量和 String() 方法得到的都是 String 数据类型的数据，new String() 得到的是 Object 数据类型的数据。
				前两者变量在做比较的时候，比较的是它的值；第三者变量在做比较的时候，比较的是它的引用。
		怎么实现字符串逆序输出？
			方法一：
				function IsReverse(str) {
					return Array.from(str).reverse().join('');
					// 或者 return str.split('').reverse().join('');
				}
			方法二：
				function IsReverse(str) {
					var result = '';
					for(var i = str.length - 1; i >= 0; i--) {
						result += str.charAt(i);
					}
					return result;
				}
		怎么统计字符串中出现次数最多的字符，并记录它出现的次数？
			方法一：
				function getMaxCount(str) {
					// 创建一个 obj 对象。属性：出现的字符；属性值：该字符出现的次数。
					var obj = {};
					for(var i = 0; i < str.length; i++) {
						var chars = str.charAt(i);
						if(obj[chars]) {
							obj[chars]++;
						} else {
							obj[chars] = 1;
						}
					}
					// 遍历 obj 对象的属性。
					var max = 0;
					var ch = '';
					for(var k in obj) {
						if(obj[k] > max) {
							max = obj[k];
							ch = k;
						}
					}
					return '最多的字符是' + ch + '，出现的次数为' + max + '。';
				}
				注意：这个函数有需要优化的地方。
			方法二：
				function getMaxCount(str) {
					var max = 0;
					var ch = '';
					str = str.split('').sort().join('');
					for(var i = 0; i < str.length; i++) {
						var char = str[i];
						var charCount = str.lastIndexOf(char) - i + 1;
						if(charCount > max) {
							max = charCount;
							ch = char;
						}
						i = str.lastIndexOf(char);
					}
					return '最多的字符是' + ch + '，出现的次数为' + max + '。';
				}
		怎么实现字符串的去重操作？
			方法一：
				function delReStr(str) {
					const arr = str.split('').sort();
					for(var i = arr.length - 1; i > 0; i--) {
						if(arr[i] == arr[i - 1]) {
							arr.splice(i, 1);
						}
					}
					return arr.join('');
				}
			方法二：
				function delReStr(str) {
					return [...new Set(str.split(''))].join('');
				}
		怎么判断一个字符串是否为回文字符串？
			function isHuiWen(str) {
				var str1 = "";
				for(var i = str.length - 1; i >= 0; i--) {
					str1 += str[i];
				}
				if(str1.toLowerCase() === str.toLowerCase()) {
					 return true;
				}
				 return false;
			}
	构造函数和原型
		普通函数与构造函数的区别。
			1、构造函数的函数名第一字母通常会大写；
			2、构造函数的函数体内可以使用 this 关键字，来表示要生成的实例对象；
			3、在使用构造函数的时候，必须与 new 操作符配合使用；
			4、构造函数的执行过程与普通函数是不一样的。
				new 操作符的作用。（见下）
		原型对象的理解。
			见笔记截图。
		怎么判断属性是实例的还是原型对象的？（person 为实例对象名）
			name in person;				// 返回 true 有，false 没有。(实例或原型中是否有 name 属性。)
			person.hasOwnProperty('name');		// 返回 true 有，false 没有。（实例中是否有 name 属性。）
***		new 操作符的作用。（Person 为构造函数名）
			1、首先创建一个空对象：var tempVar = {}；
			2、将这个空对象的原型指向构造函数的原型：tempVar.__proto__ = Person.prototype；
			3、将 this 指向将要被创建的对象：Person.call(tempVar)；
			4、如果构造函数没有返回值，则默认返回 this 即 return tempVar。
***		模拟 new 操作符的实现。
			function Person(name, sex) {
				this.name = name;
				this.sex = sex;
			}
			Person.prototype.getInfo = function() {
				console.log('name：' + this.name + '，sex：' + this.sex + '。');
			}
			function New(fun, ...parms) {
				var obj = {};
				obj.__proto__ = Person.prototype;
				Person.apply(obj, parms);
				return obj;
			}
			var person = New(Person, 'zhangsan', 'nan');
			console.log('person: ' + person + '。');
		Object.create(proto，[propertiesObject])
			参数：
				proto：新创建对象的原型对象。如果为 null，则原型对象为 undefined，因此也不会继承 Object.prototype 上的方法。
				propertiesObject：属性描述符，其值如下：
					{ 
						属性名: {
							enumerable: true,	// 当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。默认值为 false。
							configurable: true,	// 当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认值为 false。
							writable: true,		// 当且仅当该属性的 writable 键值为 true 时，属性的值，也就是下面的 value 值，才能被赋值运算符改变。默认值为 false。
							value: ''		// 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认值为 undefined。
						},
						......
					}
			返回值：
				一个新对象，带着指定的原型对象和属性。
			方法的实现原理：
				Object.create = function(proto，propertiesObject) {
					// 省去了其他的判断操作。
					function F() {}
					F.prototype = proto;
					if(propertiesObject) {
						// 添加或者修改对象的属性值。
						return Object.defineProperties(new F(), propertiesObject);
					} eles {
						return new F();
					}
				}
			方法的应用场景：
***				实现对象的继承。代码原理：
					function Person(name, sex) {
						this.name = name;
						this.sex = sex;
					}
					Person.prototype.getInfo = function() {
						console.log('name：' + this.name + '，sex：' + this.sex + '。');
					}
					function Student(name, sex, age) {
						Person.call(this, name, sex);
						this.age = age;
					}
					Student.prototype = Object.create(Person.prototype);
					Student.prototype.constructor = Student;
					var student = new Student('zhangsan', 'nan', '18');
					console.log('student: ' + student + '。');
	数组
		怎么判断一个变量是数组还是对象？
			instanceof
				function getType(value) {
					if(value instanceof Array) {
						return 'Array';			// Array 类型的判断必须在 Object 类型判断之前。
					} else if(value instanceof Object) {
						return 'Object';
					} else {
						return 'no Array, also no Object.';
					}
				}
				注意：数组类型是 Object 的派生类型，数组类型也是 Object 类型。
			构造函数
				function getType(value) {
					var constructor = value.__proto__.constructor
					if(constructor === Array) {
						return 'Array';			// Array 类型和 Object 类型的判断没有顺序要求。
					} else if(constructor === Object) {
						return 'Object';
					} else {
						return 'no Array, also no Object.';
					}
				}
			toString()
				function getType(value) {
					// 兼容低版本的浏览器。
					if(!Array.isArray) {
						Array.isArray = function(args) {
							return Object.prototype.toString.call(args) === '[object Array]';
						}
					}
					if(isArray(value)) {
						return 'is Array.';
					} else {
						return 'no Array.';
					}
				}
		怎么统计出数组中每个元素出现的次数？
			function getItemCount(array) {
				array.reduce(function (itemCount, item) {
						if (item in itemCount) {
							itemCount[item]++;
						} else {
							itemCount[item] = 1;
						}
						return itemCount;
					}, {});
			}
	DOM 性能问题。
		1、对 DOM 查询操作进行数据缓存；
			const length = document.getElementsByTagName("p").length;
			for (let i = 0; i < length; i++) {}
		2、利用文档片段将多次 DOM 操作合并为一次 DOM 操作。
			<ul id="list"></ul>
			const listNode = document.getElementById("list");
			const frag = document.createDocumentFragment();
			for (let i = 0; i < 10; i++) {
				const li = document.createElement("li");
				li.innerHTML = `item${i}`;
				frag.appendChild(li);
			}
			listNode.appendChild(frag);



前端工程化和模块化
	Babel 的原理
		Babel 的主要工作是对代码进行转译，实现语法降级，解决兼容问题。
		转译分为三个阶段：解析、转换、生成。
	Git 工作流
		feature：新功能分支。一个新功能对应一个分支。由 develop 分支而来，并且合并到 develop 分支中去。
		develop：主开发分支。开发时用的分支。
			此分支代码会在开发阶段完毕后被复制到 release 分支。
		release：发布分支。测试时用的分支。
			此分支代码会在测试完毕后被复制到 master 和 develop 分支。
		debug：补丁分支。用于修复在测试阶段发现的 bug。由 release 分支而来，并且合并到 release 分支中去。
		master：主分支。用于真实环境上线的分支。
			此分支代码会在线上严重紧急 bug 被修复后被重新复制到 release 和 develop 分支。
		hotfix：热补丁分支。用于修复在线上版本中发现的严重紧急 bug。由 master 分支而来，并且合并到 master 分支中去。
	CommonJS | Node.js 模块化规范
		CommonJS 模块化规范是以同步模式加载模块的。因为 Node.js 的执行机制是在启动的时候加载模块，所以 CommonJS 模块化规范可以在 Node.js 环境中使用。
		模块化规范的要求：
			1、每个模块内部的 module 变量代表当前的模块；
			2、module 变量是一个对象，它的 exports 属性是对外的接口；
			3、加载某个模块其实是加载该模块的 module.exports 对象；
			4、require() 方法用于加载模块。
		模块分类
			1、内置模块；
				由 Node.js 官方提供的 fs、path、http 等。
			2、自定义模块；
				用户自己创建的 .js 文件。
			3、第三方模块。
				由第三方开发出来的模块，使用前需先下载。
		require() 加载模块
			const http = require('http');			// 加载内置模块
			const custom = require('./custom.js');		// 加载自定义模块
			const moment = require('moment');		// 加载第三方模块
			注意：
				1、使用 require() 方法加载其它模块时，会执行被加载模块中的代码。
				2、在自定义模块中定义的变量、方法等成员只能在当前模块内被访问，这种模块级别的访问限制叫做“模块作用域”。
		module 暴露模块
			在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息。
			在外界使用 require() 方法导入一个自定义模块的时候，得到的成员就是该模块中的 module.exports 对象。
			注意：一般情况下 module.exports 对象和 exports 对象是等价的，除非 exports 对象的引用发生了改变。
		模块的加载机制
			1、优先从缓存中加载；
				模块在第一次加载后会被缓存，这也意味着多次调用 require() 方法不会导致模块代码被多次执行。
				注意：不论内置模块、用户自定义模块还是第三方模块，他们都会先从缓存中加载，从而提高加载效率。
			2、优先加载内置模块；
				内置模块由 Node.js 官方提供，因此内置模块的加载优先级是最高的，存在同名模块的时候内置模块被优先加载。
			3、自定义模块的加载机制；
				使用 require() 方法加载自定义模块时，路径标识符必须以 ./ 或 ../ 开头；否则 Node.js 会把该自定义模块当作内置模块或第三方模块来进行加载。
				同时，如果省略了文件的扩展名，Node.js 会按顺序分别尝试加载以下类型的文件：
					1、按照确切的文件名进行加载；
					2、补全 .js 扩展名进行加载；
					3、补全 .json 扩展名进行加载；
					4、补全 .node 扩展名进行加载；
					5、加载失败，终端报错。
			4、第三方模块的加载机制；
				1、使用 require() 方法加载第三方模块时，Node.js 会从该文件当前目录的 node_modules 文件夹中加载第三方模块；
				2、如果没有找到该第三方模块，则移动到上一层目录的 node_modules 文件夹中进行加载，依此原理直到文件系统的根目录。
			5、目录作为模块进行加载。
				1、在被加载的目录下查找 package.json 文件，将文件里的 main 属性作为 require() 方法加载的入口；
				2、如果目录里没有 package.json 文件，或者该文件下的 main 入口不存在，则 Node.js 将会尝试加载目录下的 index.js 文件；
				3、如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error:Cannot find module 'xxx'。
	ES6（ES Module） 模块化规范
		ES Module 模块化规范是以异步模式加载模块的。ES6 模块化规范是服务器端和浏览器端通用的模块化开发规范。
		语法规范要求：
			1、每个 JS 文件都是一个独立的模块；
			2、导入其它模块成员使用 import 关键字；
			3、向外共享模块成员使用 export 关键字。
		在 Node.js 中使用 ES6 模块化规范
			在项目的 package.json 文件中添加 "type": "module"。如果不添加的话，默认遵循 common.js 模块化规范。
		ES6 模块化基本语法
			默认导出与导入
				export default { 成员1, 成员2 }
				import 接收对象的名称 from '模块标识符'
				注意：每个模块中只允许使用一次 export default，否则会报错。
			按需导出与导入
				export 成员1, 成员2
				import { 成员1 as 别名1, 成员2 as 别名2 }  from '模块标识符'
				注意：
					1、每个模块中可以使用多次按需导出；
					2、按需导入的成员名称必须与按需导出的成员名称保持一致；
					3、按需导入时可以使用 as 关键字对导入的成员命别名；
					4、按需导入可以和默认导入一起使用；
					5、按需导出可以和默认导出一起使用。
			直接导入并执行模块中的代码
				import '模块标识符'



Vue 核心原理
	数据响应式
		响应式分类
			vue2.x 对象属性劫持
				Object.defineProperty(obj, prop, descriptor)
			vue3.x 对象整体代理
				let proxy = new Proxy(target, handler)
			注意：vue3.x 解决了 vue2.x 中对数据响应式处理的无端性能消耗问题。
		Object.defineProperty(obj, prop, descriptor)
			基础用法：
				const dataName = {};
				let _propName = undefined;
				Object.defineProperty(dataName, 'propName', {
					// 当访问 dataName 的 propName 属性的时候自动调用的方法，并且此函数的返回值就是访问时获取到的值。
					get(){
						console.log('get');
						// dataName 对象中的 propName 属性值就是这里的返回值。
						return _propName;
					},
					// 当设置 dataName 的 propName 属性的时候自动调用的方法，并且此函数的形参值就是设置时被写入的值。
					set(newValue){
						console.log('set');
						if(newValue === _propName) { return }
						// 必须这么写，才能正确设置 dataName 的 propName 属性。
						_propName = newValue;
						// 视图渲染逻辑。
						......
					}
				}); 
				dataName.propName = 'name';	// 触发 set()
				console.log(dataName.propName);		// 触发 get()
				console.log(dataName);
				注意：set() 和 get() 函数中不能直接访问或者设置 dataName 对象中的 propName 属性，否则会报栈溢出错误。
			通用用法：
				const dataName = data();
				// 引入发布订阅模式。
				// eventName 是 dataName 对象中的属性名。
				const Dep = {
					eventMap: {},
					collect: function(eventName, fn) {
						if(!this.eventMap[eventName]) {
							this.eventMap[eventName] = [];	
						}
						this.eventMap[eventName].push(fn);
					},
					trigger: function(eventName) {
						this.eventMap[eventName].forEach(fn => fn());
					}
				};
				// 初始化视图的数据和初始化 Dep 数据。
				compile();
				function compile() {
					// 根据“v-”指令找到 DOM 结构，获取到相应的 nodeArr 节点数组。
					......
					for(let i = 0; i < nodeArr.length; i++) {
						// nodeName 是 nodeArr[i] 节点中“v-”指令的指令名。
						// nodeValue 是 nodeArr[i] 节点中“v-”指令的属性值。
						if(nodeName === 'v-text') {
							nodeArr[i].innerText = dataName[nodeValue];
							// 运用闭包保存响应式操作的逻辑。发布订阅模式实现变量视图的一对多响应。（提升效率）
							Dep.collect(nodeValue, () => {
								nodeArr[i].innerText = dataName[nodeValue];
							});
						} else (nodeName === 'v-model') {
							nodeArr[i].value = dataName[nodeValue];
							// 运用闭包保存响应式操作的逻辑。发布订阅模式实现变量视图的一对多响应。（提升效率）
							Dep.collect(nodeValue, () => {
								nodeArr[i].value = dataName[nodeValue];
							});
							// 视图响应数据的逻辑。
							nodeArr[i].addEventListener('input', (e) => {
								dataName[nodeValue] = e.target.value;
							});
						}
					}
				}
				// 将 data() 函数中的数据包装成响应式数据。
				Object.keys(dataName).forEach((key) => {
					observe(dataName, key, dataName[key]);
				});
				function observe(dataName, key, value) {
					Object.defineProperty(dataName, key, {
						get(){
							return value;
						},
						set(newValue){
							if(newValue === value) { return }
							value = newValue;
							// 触发视图渲染。
							Dep.trigger(key);
						}
					}); 
				}
				注意：
					1、函数的形参等价于函数内部初始值为 undefined 的变量；
					2、调用函数传入实参的时候相当于在给对应的形参变量做赋值操作；
***					3、上面这段代码被称为 Vue 的数据劫持，在此基础上 Vue 还对处理后的 dataName 进行了数据代理，将 dataName 中的属性全部代理到 Vue 的实例对象上。
		// Proxy(target, handler)
	虚拟 DOM 和 diff 算法
		Vue 初次渲染页面时
			1、Vue 依据 Vue 实例对象的模板结构嵌套调用 snabbdom 插件中的 h 函数，以此来在内存中生成对应的虚拟 DOM 树对象；
			2、然后将此虚拟 DOM 树对象渲染并挂载到页面上的 #app 结点（实际上替换掉了 #app 结点）。
		Vue 更新渲染页面时
			1、Vue 依据 Vue 实例对象的新模板结构嵌套调用 snabbdom 插件中的 h 函数，再一次在内存中生成对应新的虚拟 DOM 树对象；
			2、如果新旧虚拟 DOM 树根节点的标签名和 id 相同，那么 diff 算法会将该虚拟 DOM 树视为同一颗树，继而递归调用 diff 算法对新旧虚拟 DOM 树的虚拟 DOM 子树进行依次对比；
			3、如果新旧虚拟 DOM 树不是同一棵树，则新的真实 DOM 树会被渲染并插入到旧的真实 DOM 树的前面，然后旧的真实 DOM 树被删除。
		注意：diff 算法的核心原理是同层同类虚拟节点之间才会进行相互比较。
	
		



