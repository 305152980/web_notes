Node.js 介绍
	Node.js 是一个基于 Chrome V8 引擎的 JS 运行环境，它仅仅提供了基础的 JS 解析功能和与之相关的 API。
	基于此，很多强大的工具和框架如雨后春笋层出不穷，所以学会了 Node.js 可以让前端程序员胜任更多的工作岗位。
	应用：
		1、基于 Express 框架可以快速地构建 Web 应用；
		2、基于 Electron 框架可以快速地构建跨平台桌面应用；
		3、基于 Restify 框架可以快速地构建 API 接口项目（后端项目）；
		4、读写和操作数据库、创建实用的命令行工具辅助前端开发等等。
	学习路径：JS 语法 + Node.js 内置 API 模块（fs、path、http） + 第三方 API 模块（Express、Mysql）
	在 Node.js 环境中执行 JS 代码：
		打开终端执行如下命令：node 全文件名
fs 文件模块
	fs 模块提供了一系列方法和属性用来满足用户对文件的操作需求。
	如果要在 JS 代码中使用 fs 模块，需要使用如下方式先行导入：
		const fs = require('fs');
	fs 模块的方法
		fs.readFile()
			用来读取指定文件中的内容。
			fs.readFile(path[, options], function(err, dataStr) {});
				path：表示文件存放的路径；
				options：表示以什么编码来读取文件，默认值 utf8；
				function：文件读取完成后的回调函数；
				err：读取成功时值为 null，读取失败时值为错误信息对象；
				dataStr：读取成功时值为文件内容，读取失败时值为 undefined。
				注意：以 err 值是否为 null 来判断文件是否读取成功。
		fs.writeFile()
			用来向指定文件中写入内容。
			fs.writeFile(path, data[, options], function(err) {});
				data：表示要写入文件的内容。
				注意：
					1、以 err 值是否为 null 来判断文件是否写入成功；
					2、此方法只能用来创建文件，不能用来创建目录。重复写入同一文件时，新内容会覆盖旧内容。
	相对路径
		在使用 fs 模块操作文件时，如果提供的操作路径是相对路径，那么会以执行 node 命令时所处的目录，动态地拼接出操作文件的完整路径。 
	注意：可以使用 __dirname 来表示当前文件所处目录的绝对路径。
path 路径模块
	path 模块提供了一系列方法和属性用来满足用户对路径的处理需求。
	如果要在 JS 代码中使用 path 模块，需要使用如下方式先行导入：
		const path = require('path');
	path 模块的方法
		path.join()
			用来将多个路径片段拼接成一个完整的路径字符串。
			var pathStr = path.join([...paths]);
			eg：
				console.log(path.join('/a', '/b/c', '../', '/d', 'e'));		// /a/b/d/e
			注意：../ 会抵消前面的一层路径。
		path.basename()
			用来从路径字符串中将文件名解析出来。
			var fileName = path.basename(path[, ext]);
				ext：有该值，返回不带扩展名的文件名；没有该值，返回带扩展名的文件名。
		path.extname()
			用来从路径字符串中将文件扩展名解析出来。
			var fileExtName = path.extname(path);
http 请求模块
	通过 http 模块提供的 http.createServer() 方法，可以将一台普通的电脑变成一台 Web 服务器。
	如果要在 JS 代码中使用 http 模块，需要使用如下方式先行导入：
		const http = require('http');
	创建 Web 服务器的步骤
		1、导入 http 模块；
			const http = require('http');
		2、创建 Web 服务器实例；
			const server =  http.createServer();
		3、为服务器绑定 request 事件，监听客户端的请求；
			server.on('request', (req, res) => {
				console.log('Someone visit our web server.');
			})
				req：请求对象，包含了与客户端相关的数据和属性；
					req.url：客户端请求的 URL 地址；
					req.method：客户端请求的请求类型。
				res：响应对象，包含了与服务器相关的数据和属性。
					res.end(data)：将 data 数据响应给客户端。
		4、启动服务器。
			server.listen(8080, () => {
				console.log('http server running at http://127.0.0.1:8080');
			})
		解决中文乱码问题
			server.on('request', (req, res) => {
				var data = '有人参观我们的服务器。'
				res.setHeader('Content-Type', 'text/html; charset=utf-8');
				res.end(data);
			})

			

CommonJS | Node.js 模块化规范
	CommonJS 模块化规范是以同步模式加载模块的。因为 Node.js 的执行机制是在启动的时候加载模块，所以 CommonJS 模块化规范可以在 Node.js 环境中使用。
	模块化规范的要求：
		1、每个模块内部的 module 变量代表当前的模块；
		2、module 变量是一个对象，它的 exports 属性是对外的接口；
		3、加载某个模块其实是加载该模块的 module.exports 对象；
		4、require() 方法用于加载模块。
	模块分类
		1、内置模块；
			由 Node.js 官方提供的 fs、path、http 等。
		2、自定义模块；
			用户自己创建的 .js 文件。
		3、第三方模块。
			由第三方开发出来的模块，使用前需先下载。
	require() 加载模块
		const http = require('http');			// 加载内置模块
		const custom = require('./custom.js');		// 加载自定义模块
		const moment = require('moment');		// 加载第三方模块
		注意：
			1、使用 require() 方法加载其它模块时，会执行被加载模块中的代码。
			2、在自定义模块中定义的变量、方法等成员只能在当前模块内被访问，这种模块级别的访问限制叫做“模块作用域”。
	module 暴露模块
		在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息。
		在外界使用 require() 方法导入一个自定义模块的时候，得到的成员就是该模块中的 module.exports 对象。
		注意：一般情况下 module.exports 对象和 exports 对象是等价的，除非 exports 对象的引用发生了改变。
	模块的加载机制
		1、优先从缓存中加载；
			模块在第一次加载后会被缓存，这也意味着多次调用 require() 方法不会导致模块代码被多次执行。
			注意：不论内置模块、用户自定义模块还是第三方模块，他们都会先从缓存中加载，从而提高加载效率。
		2、优先加载内置模块；
			内置模块由 Node.js 官方提供，因此内置模块的加载优先级是最高的，存在同名模块的时候优先加载。
		3、自定义模块的加载机制；
			使用 require() 方法加载自定义模块时，路径标识符必须以 ./ 或 ../ 开头；否则 Node.js 会把该包当作内置模块或第三方模块来进行加载。
			同时，如果省略了文件的扩展名，Node.js 会按顺序分别尝试加载以下类型的文件：
				1、按照确切的文件名进行加载；
				2、补全 .js 扩展名进行加载；
				3、补全 .json 扩展名进行加载；
				4、补全 .node 扩展名进行加载；
				5、加载失败，终端报错。
		4、第三方模块的加载机制；
			1、使用 require() 方法加载第三方模块时，Node.js 会从该文件当前目录的 node_modules 文件夹中加载第三方模块；
			2、如果没有找到，则移动到上一层目录的 node_modules 文件夹中进行加载，依次原理直到文件系统的根目录。
		5、目录作为模块进行加载。
			1、在被加载的目录下查找 package.json 文件，将文件里的 main 属性作为 require() 方法加载的入口；
			2、如果目录里没有 package.json 文件，或者该文件下的 main 入口不存在或无法解析，则 Node.js 将会尝试加载目录下的 index.js 文件；
			3、如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error:Cannot find module 'xxx'。
ES6（ES Module） 模块化规范
	ES Module 模块化规范是以异步模式加载模块的。ES6 模块化规范是服务器端和浏览器端通用的模块化开发规范。
	语法规范要求：
		1、每个 JS 文件都是一个独立的模块；
		2、导入其它模块成员使用 import 关键字；
		3、向外共享模块成员使用 export 关键字。
	在 Node.js 中使用 ES6 模块化规范
		在项目的 package.json 文件中添加 "type": "module"。如果不添加的话，默认遵循 common.js 模块化规范。
	ES6 模块化基本语法
		默认导出与导入
			export default { 默认导出的成员1, 默认导出的成员2 }
			import 接收对象的名称 from '模块标识符'
			注意：每个模块中只允许使用一次 export default，否则会报错。
		按需导出与导入
			export 按需导出的成员1, 按需导出的成员2
			import { 按需导出成员1 as 别名1, 按需导出成员2 as 别名2 }  from '模块标识符'
			注意：
				1、每个模块中可以使用多次按需导出；
				2、按需导入的成员名称必须和按需导出的成员名称保持一致；
				3、按需导入时可以使用 as 关键字进行命别名；
				4、按需导入可以和默认导入一起使用。
		直接导入并执行模块中的代码
			import '模块标识符'



包
	Node.js 中的第三方模块又叫做包。Node.js 中的包都是免费开源的。
	包的查询与下载
		在 https://www.npmjs.com/ 查询包的信息，在 https://registry.npmjs.org/ 下载包。
	在项目中安装最新版本的包
		npm install 包的完整名称
		注意：初次安装包完成后，在项目文件夹下会生成一个 mode_modules 包文件夹和 package-lock.json 配置文件。
			mode_modules：用来存放所有已安装到项目中的包，require() 导入第三方包的时候就是从这个目录查找并加载包的；
			package_lock.json：用来记录 mode_modules 目录下的每一个包的下载信息，例如：包的名字、版本号、下载地址等。
	在项目中安装指定版本的包
		npm install 包的完整名称@版本号
	包的语义化规范
		包的版本号是以“点分十进制”形式进行定义的，总共有三位数字。例如：2.24.0
			第一位数字：大版本；
			第二位数字：功能版本；
			第三位数字：bug 修复版本。
		注意：只要前面的版本号增长了，后面的版本号就要归零。
	包的分类
		项目包
			被安装到项目的 mode_modules 目录中的包都是项目包。
			核心依赖包：被记录到 package.json 文件中的 dependencies 节点中的包。
				npm install 包的完整名称
			开发依赖包：被记录到 package.json 文件中的 devDependencies 节点中的包。
				npm install 包的完整名称 --save-dev
		全局包
			在执行 npm install 包的完整名称 命令时，如果提供了 -g 参数，则会把包安装为全局包。
			全局包会被安装到 C:\Users\lijie\AppData\Roaming\npm\mode_modules 目录中。
				# 安装指定的全局包
				npm install 包的完整名称 -g
				# 卸载指定的全局包
				npm uninstall 包的完整名称 -g
			注意：
				1、只有工具性质的包才有全局安装的必要性，因为他们提供了好用的终端命令；
				2、判断某个包是否需要全局安装后才能使用，可以参考官方的使用说明。
	包结构的规范
		1、包必须以单独的目录而存在；
		2、包的顶级目录下必须包含 package.json 这个包管理配置文件；
		3、package.json 中必须包含 name、version、main 三个属性，分别代表包的名字、版本号、包的入口。
npm 包管理工具
	包管理配置文件
		npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件，用来记录与项目有关的一些配置。
		例如：
			1、项目的名称、版本号、描述等；
			2、项目中都用到了哪些包；
			3、哪些包只在开发期间会用到；
			4、哪些包在开发和部署时都会用到。
		注意：项目开发中，一定要把 node_modules 文件夹，添加到 .gitignore 文件夹中。
	快速创建 package.json
		在项目根目录中执行如下命令：
			npm init -y
		注意：
			1、这个命令只能在英文目录下成功运行，所以项目名必须是英文且不能出现空格；
			2、运行 npm install 包的完整名称 命令安装包的时候，npm 包管理工具会自动把依赖包的名称和版本号记录到本项目的 package.json 文件中。
	dependencies 节点
		package.json 文件中的 dependencies 节点，专门用来记录 npm install 命令安装了哪些包。
	devDependencies 节点
		package.json 文件中的 devDependencies 节点，专门用来记录项目开发阶段依赖哪些包。
		使用如下命令，将包记录到 devDependencies 节点中：（不会记录到 dependencies 节点中）
			npm install 包的完整名称 --save-dev
			npm install 包的完整名称 -D
	一次性安装所有的包
		npm install
		注意：执行 npm install 命令时，npm 包管理工具会先读取 package.json 中的包依赖信息，然后将相应的包一次性下载到项目中。
	卸载指定的包
		npm uninstall 包的完整名称
		注意：执行 npm uninstall 包的完整名称 命令卸载包时，npm 包管理工具会将该包的信息从 package.json 文件中的包依赖信息中移除掉。
	解决包下载速度慢
		法一：（实测法一可用）
			# 查看当前下载包的镜像源。
			npm config get registry
			# 将下载包的镜像源切换为淘宝 npm 镜像源。
			npm config set registry=https://registry.npm.taobao.org/
			# 检查镜像源是否切换成功。
			npm config get registry
		法二：
			# 通过 npm 包管理器，将 nrm 安装为全局可用的工具。
			npm i nrm -g
			# 查看所有可用的镜像源。
			nrm ls
			# 将下载包的镜像源切换为淘宝 npm 镜像源。
			npm use taobao
	发布包
		1、登录 npm 账号；
			npm login
			注意：在运行该命令之前，必须先把下载包的服务器地址切换为 npm 的官方服务器，否则发布包会出错。
		2、在 npm 上发布包；
			将终端切换到包的根目录之后，运行 npm publish 命令即可将包发布到 npm 上。（注意：包名不能雷同）
		3、删除 npm 上已发布的包。
			运行 npm unpublish 包的完整名称 --force 命令，就可以从 npm 上删除已经发布的包。
			注意：
				1、npm unpublish 包的完整名称 --force 命令，只能删除 72 小时内发布的包；
				2、npm unpublish 包的完整名称 --force 命令删除的包，在 24 小时内不允许重复发布；
				3、发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包。