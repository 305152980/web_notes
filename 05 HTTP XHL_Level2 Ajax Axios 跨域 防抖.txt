HTTP
	请求消息
		HTTP 的请求消息又叫做 HTTP 的请求报文。
		HTTP 的请求消息由请求行、请求头、空行和请求体 4 个部分组成。
		请求行：由请求方式、URL 和 HTTP 协议版本 3 个部分组成，它们之间使用空格隔开。
		请求头：由多行键值对组成，每行键值对之间用英文的冒号分割。用来描述客户端的基本信息。
			User-Agent：用来说明当前是什么类型的浏览器。
			Conten-Type：用来描述发送到服务器的数据格式。
			Accept：用来描述客户端能够接受什么类型的返回类容，例如：图片、网页等。
			Accept-Language：用来描述客户端期望接收哪种人类语言的文本类容。
		空行：最后一个请求头字段的后面是一个空行，告诉服务器请求头到此结束。
		请求体：只有 post 请求才有请求体，请求体中存放的是提交到服务器的数据。	
	响应消息
		HTTP 的响应消息又叫做 HTTP 的响应报文。
		HTTP 的响应消息由状态行、响应头、空行和响应体 4 个部分组成。
		状态行：由 HTTP 协议版本、状态码和状态码的描述文本 3 个部分组成，它们之间使用空格隔开。
		响应头：由多行键值对组成，每行键值对之间用英文的冒号分割。用来描述服务器的基本信息。	
		空行：最后一个响应头字段的后面是一个空行，告诉浏览器响应头到此结束。
		响应体：存放的是服务器响应给客户端的资源内容。
	请求方法
		用来表明客户端要对服务器上的资源所执行的操作，分为 get 和 post 等。
	响应状态码
		用来标识响应的状态。
		HTTP 响应状态码由三个十进制数字组成，第一个十进制数字定义了响应状态码的类型，后两个数字用来对响应状态码进行细分。
		1**：信息，服务器收到请求，需要请求者继续执行操作。
		2**：成功，表示操作被成功接受并处理。
			200 OK 请求成功。一般用于 get 和 post 请求。
			201 Created 已创建。成功请求并创建了新的资源。一般用于 post 和 put 请求。
		3**：重定向，表示服务器要求客户端重定向，需要客户端进一步的操作以完成请求。
			301 Moved Permanently 永久移动。请求的资源已被永久的移动到新的 URL。返回的信息包括新的 URL。返回的信息包括新的 URL。下一次客户端通过浏览器缓存的 URL 继续访问该资源。
			302 Found 临时移动。请求的资源被临时的移动到新的 URL。返回的信息包括新的 URL。客户端通过浏览器缓存的 URL 继续访问该资源。
			304 Not Modified 未移动。返回的信息没有响应体，没有资源返回。客户端通过浏览器缓存的 URL 继续访问资源。
		4**：客户端错误，表示请求包含语法错误或非法内容，从而导致了这次响应的失败。
			400 Bad Request 1、语义有误，除非进行修改，否则客户端不应重复提交该请求；2、请求参数有误。
			401 Unauthorized 当前请求需要用户验证。
			403 Forbidden 服务器已经理解请求，但是拒绝执行它。
			404 Not Found 服务器无法根据客户端的请求找到资源。
			408 Request Timeout 请求超时，服务器等待客户端发送的请求时间过长。
		5**：服务器错误，表示服务器在处理请求的过程中发生了错误。
			500 Internal Server 服务器内部错误，无法完成请求。
			501 Not Implemented 服务器不支持该请求方法。
			503 Service Unavailable 由于超载或系统维护，服务器暂时无法处理客户端的请求。



XHL Level2
	旧版 XHL 对象的缺点：
		1、只支持文本数据的传输，无法用来读取和上传文件；
		2、传送和接收数据时，没有进度信息，只能提示有没有完成。
	新版 XHL 对象的优点：
		1、可以设置 HTTP 请求的时限，超时即失败；
		2、可以使用 FormData 对象管理表单数据；
		3、可以上传文件；
		4、可以获得数据传输的进度信息。
	设置 HTTP 请求时限
		var xhr = new XMLHttpRequest();
		xhr.timeout = 3000;
		xhr.ontimeout = function(event) {
			alert('请求超时！')
		}
	FormData 对象管理表单数据
		用法一：
			var fd = new FormData();
			fd.append('key1', value1);
			fd.append('key2', value2);
			var xhr = new XMLHttpRequest();
			xhr.open('POST', URL);
			xhr.send(fd);
			xhr.onreadystatechange = function() {
				if(xhr.readyState === 4 && xhr.status === 200) {
					console.log(xhr.responseText);
				}
			}
		用法二：
			var form = document.querySelector('#form');
			form.addEventListener('submit', function(e) {
				e.preventDefault();
				var fd = new FormData(form);
				var xhr = new XMLHttpRequest();
				xhr.open('POST', URL);
				xhr.send(fd);
				xhr.onreadystatechange = function() {
					if(xhr.readyState === 4 && xhr.status === 200) {
						console.log(xhr.responseText);
					}
				}
				this.reset();
			})
	上传文件的步骤
		1、定义 UI 结构；
			<!-- 1、文件选择框。 -->
			<input type="file" id="file" />
			<!-- 2、上传按钮。 -->
			<button id="btnUpload">上传文件</button>
			<!-- 3、显示上传到服务器的照片。 -->
			<img src="" alt="" id="img" />
		2、验证是否选择了文件；
			// 1、获取上传文件的按钮。
			var btnUpload = document.querySelector('#btnUpload');
			// 2、为按钮添加 click 监听事件。
			btnUpload.addEventListener('click', function() {
				// 3、获取到选择的文件列表。
				var files = document.querySelector('#file').files;
				if(files.length <= 0) {
					return alert('请选择要上传的文件！');
				}
				// 后续业务逻辑
				...
			});
		3、向 FormData 中追加数据；
			// 1、创建 FormData 对象。
			var fd = new FormData(form);
			// 2、向 FormData 中追加文件。
			fd.append('key', files[0]);
		4、使用 xhr 发起上传文件的请求；
			// 1、创建 xhr 对象。
			var xhr = new XMLHttpRequest();
			// 2、调用 open 函数。
			xhr.open('POST', URL);
			// 3、发起请求。
			xhr.send(fd);
		5、监听 onreadystatechange 事件。
			xhr.onreadystatechange = function() {
				if(xhr.readyState === 4 && xhr.status === 200) {
					var data = JSON.parse(xhr.responseText);
					if(data.status === 200) {
						// 将服务器返回的图片地址，设置为 <img> 标签的 src 属性。
						document.quertSelector('#img').src = data.url;
					} else {
						// 文件上传失败。
						console.log(data.message);
					}
				}
			}
	显示文件上传的进度
		// 1、创建 xhr 对象。
		var xhr = new XMLHttpRequest();
		// 2、监听 xhr.upload 的 onprogress 事件。
		xhr.upload.onprogress = function(e) {
			// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度。
			if(e.lengthComputable) {
				// e.loaded 已传输的字节
				// e.total 需传输的总字节
				var percentComplete = Math.ceil((e.loaded / e.total) * 100);
				// 后续业务逻辑
				...
			}
		}
		// 3、监听 xhr.upload 的 onload 事件。
		xhr.upload.onload = function() {
			// 上传完成后的操作
			...
		}
	基于 jQuery 的文件上传
		<!-- 导入 jQuery -->
		<script src=""></script>
		<!-- 文件选择框 -->
		<input type="file" id="file" />
		<!-- 上传文件按钮 -->
		<button id="btnUpload">上传文件</button>
		$('document').ajaxStart(function() {
			$('#loading').show();
		})
		$('document').ajaxEnd(function() {
			$('#loading').hide();
		})
		$('#btnUpload').on('click', function() {
			// 1、将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表。
			var files = $("#files")[0].files;
			// 2、判断是否选中了文件。
			if(files.length <= 0) {
				return alert('请选择文件后再上传！');
			}
			// 3、创建 FormData 对象。
			var fd = new FormData(form);
			// 4、向 FormData 中追加文件。
			fd.append('key', files[0]);
			$.ajax({
				method: 'POST',
				url: '',
				data: fd,
				// 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值，必须。
				contentType: false,
				// 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器，必须。
				processData: false,
				success: function(res) {
					console.log(res);
				}
			});
		});
		注意：
			1、Ajax 请求开始和结束时，分别执行 ajaxStart 和 ajaxEnd 函数；
			2、自 jQuery 版本 1.8 起，ajaxStart 和 ajaxEnd 只能被附加到 document；
			3、ajaxStart 和 ajaxEnd 会监听到文档内所有的 Ajax 请求。



经 jQuery 封装后的 Ajax
	URL
		统一资源定位符，用于标识互联网上每个资源的唯一存放位置。
		浏览器只有通过 URL 地址，才能正确定位资源的存放位置，从而成功访问到对应的资源。
		组成：
			1、客户端与服务器之间的通信协议；
			2、存放该资源的服务器名称；
			3、资源在服务器上的具体存放位置。
	XHR
		如果要在网页中请求服务器上的数据资源，那么需要用到 XMLHttpRequest（简称 XHR ）对象。它是浏览器提供的 JS 成员，用来发送数据请求。
		用法：
			var xhrObj = new XMLHttpRequest();
	经 jQuery 封装后的 Ajax
		通俗的理解：在网页种利用 XMLHttpRequest 对象和服务器进行数据交互的方式，就是 Ajax 异步请求。
		浏览器中提供的 XMLHttpRequest 对象用法比较复杂，所以 jQuery 对 XMLHttpRequest 对象进行了封装，提供了一系列 Ajax 的相关函数，极大地降低了 Ajax 的使用难度。
		jQuery 中发起 Ajax 请求最常用的三个方法：
			1、$.get()
				语法：$.get(url[, data][, callback])
					url：必选，请求的地址；
					data：可选，携带的参数；
					cakkback：可选，请求成功时的回调函数，回调函数中可以拿到服务器响应回来的数据。
				代码示例：
					$.get('xxxxxxxx', { id: 1 }, function(res){
						console.log(res)			// 这里的 res 是服务器返回的数据。
					});	
			2、$.post()
				语法：$.post(url[, data][, callback])
			3、$.ajax()
				语法：$.ajax({
						type:'',				// 请求方式，例如 get 或 post，不区分大小写，建议大写。 
						url:'',					// 请求的 url 地址。
						data:{},				// 请求携带的参数。
						success:function(res){}			// 请求成功之后的回调函数。
					})
	接口文档
		组成部分：
			1、接口名称：用来标识各个接口的简单说明，如：登录接口、获取图书列表接口等；
			2、接口 URL：接口的调用地址；
			3、调用方式：接口的调用方式，如：GET 或 POST；
			4、接口参数：接口需要传递的参数，每个参数必须包含：参数名称、参数类型、是否必选、参数说明等 4 项内容；
			5、接口响应：接口返回值的详细描述，一般包含：数据名称、数据类型、数据说明等 3 项内容；
			6、响应示例（可选）。
Ajax 底层原理
	XHR
		get 请求
			// 1、创建 XHR 对象。
			var xhr = new XMLHttpRequest();
			// 2、调用 open 函数。
			xhr.open('GET', URL + '?params=value');
			// 3、调用 send 函数。
			xhr.send();
			// 4、监听 onreadystatechange 事件。
			xhr.onreadystatechange = function() {
				// 4.1、监听 xhr 对象的请求状态 readyState 和服务器的响应状态 status。
				if(xhr.readyState === 4 && xhr.status === 200) {
					// 4.2、打印服务器响应回来的数据。
					console.log(xhr.responseText);
				}
			}
		readyState 属性值
			0：状态 unsent。xhr 对象已被创建，但尚未调用 open 方法。
			1：状态 opened。open 方法已经被调用。
			2：状态 headers_received。send 方法已经被调用，响应头也已经被接受。
			3：状态 loading。数据接收中，此时 responseText 属性中已经包含了部分数据。
			4：状态 done。Ajax 请求完成，这意味着数据传输已经彻底完成或失败。
		URL 编码
			一般情况下浏览器会自动对 URL 地址进行编码操作，所以大多数情况下，程序员不需要关心 URL 地址的编码问题。
			编码函数：encodeURI(str)。
			解码函数：decodeURI(str)。
		post 请求
			// 1、创建 XHR 对象。
			var xhr = new XMLHttpRequest();
			// 2、调用 open 函数。
			xhr.open('POST', URL);
			// 3、设置 Content-Type 属性。
			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			// 4、调用 send 函数，同时将数据以查询字符串的形式，提交给服务器。
			xhr.send('params1=value1&params2=value2&params3=value3');
			// 5、监听 onreadystatechange 事件。
			xhr.onreadystatechange = function() {
				// 5.1、监听 xhr 对象的请求状态 readyState 和服务器的相应状态 status。
				if(xhr.readyState === 4 && xhr.status === 200) {
					// 5.2、打印服务器响应回来的数据。
					console.log(xhr.responseText);
				}
			}
	数据的交换格式
		XML
			缺点:
				1、格式臃肿，和数据无关的代码较多，体积大，传输效率偏低；
				2、在 JS 中解析 XML 比较麻烦。
		JSON
			优点：更小、更快、更易于解析。
			对象
				{ "key1": value1, "key2": value2, ... }
			数组
				[value1, value2, value3, ...]
			注意：
				1、字符串数据用双引号包裹。
				2、value 的数据类型可以是数字、字符串、布尔值、null、数组、对象这6种；
				3、数据的最外层必须是对象或数组格式；
				4、不能使用 undefined 或函数作为 JSON 的值。
			JSON 对象与 JS 对象的转换
				var JS 对象 = JSON.parse(JSON 对象);			// JSON 序列化
				var JSON 对象 = JSON.stringify(JS 对象);		// JSON 反序列化
	封装 Ajax 函数
		function resolveData(data) {
			var arr = [];
			for (let k in data) {
				arr.push(k + '=' + data[k])
			}
			return arr.join('&');
		}
		function myAjax(options) {
			var xhr = new XMLHttpRequest();
			var qs = resolveData(options.data);
			if(options.method.toUpperCase() === 'GET') {
				xhr.open(options.method, options.url + '?' + qs);
				xhr.send();
			} else if(options.method.toUpperCase() === 'POST') {
				xhr.open(options.method, options.url);
				xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				xhr.send(qs);
			}
			xhr.onreadystatechange = function() {
				if(xhr.readyState === 4 && xhr.status === 200) {
					var result = JSON.parse(xhr.responseText);
					options.success(result)
				}
			}
		}
Ajax 优化 Form 表单
	表单由表单标签、表单域、表单按钮三部分组成。表单域包含文本框、密码框、隐藏域、多行文本、复选框、单选框、下拉选择框和文件上传框等。
	<form> 标签的属性
		action
			规定表单提交时，向何处发送表单数据。
			值：URL 地址，默认为当前页面的 URL。
		target
			规定在何处打开 action URL。
			值：
				_blank：在新窗口中打开；
				_self：默认值，在相同的框架中打开。
		method
			规定以何种方式把表单数据提交到 action URL。
			值：get 或 post。
		enctype
			规定在发送表单数据之前，如何对其进行编码。
			值：
				application/x-www-form-urlencoded：默认值，在发送前编码所有字符；
				multipart/form-data：不对字符编码，在使用包含文件上传控件的表单时，必须使用该值；
				text/plain：空格转换为加号，不对特殊字符编码（很少用到）。
	表单的同步提交
		定义：通过点击 submit 按钮，触发表单提交的操作，从而使页面跳转到 action URL 的行为，叫做表单的同步提交。
		缺点：
			1、页面会发生跳转；
			2、页面之前的状态和数据会丢失。
		解决方案
			表单只负责采集数据，用 Ajax 负责将数据提交到服务器。
			在 jQuery 中，可以使用如下两种方式，监听到表单的提交事件。
				$('#form').submit(function(e) {
					e.preventDefault();
					// 拿到表单数据
					$('this').serialize();
					// 发送请求
					...
					this.reset();
				});
				$('#form').on('submit', function(e) {
					e.preventDefault();
					$('this').serialize();
					// 发送请求
					...
					this.reset();
				});
			serialize()
				为了简化表单中数据的获取操作，jQuery 提供了 serialize() 函数，它可以一次性地获取表单中的所有数据。
				$('#form').serialize();
				注意：每个表单域必须有 name 属性。



Axios
	Axios 是一个专注于网络数据请求的 JS 库，Axios 通过 Promise 实现了对 Ajax 的封装。
	get 请求
		axios.get('url', {params: { /*参数*/ }}).then(function(res) {
			// res.data 是服务器返回的数据。
			var result = res.data;
			console.log(result);
		});
	post 请求
		axios.post('url', { /*参数*/ }).then(function(res) {
			// res.data 是服务器返回的数据。
			var result = res.data;
			console.log(result);
		});
	axios 请求
		axios({
			method: '',
			url: '',
			data: { /*Get 请求参数*/ },
			params: { /*Post 请求参数*/ },
		}).then(function(res) {
			// res.data 是服务器返回的数据。
			var result = res.data;
			console.log(result);
		});



同源和跨域
	跨域
		同源
			如果两个页面的协议、域名和端口都相同，则两个页面具有相同的源。
			同源策略
				浏览器规定，A 网站的 JS 不允许和非同源的 B 网站之间，进行资源的交互。例如：
					1、无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB;
					2、无法接触非同源网页 DOM；
					3、无法向非同源地址发送 Ajax 请求。
		跨域
			同源反之则为跨域。
			浏览器允许发起跨域请求，但是跨域请求回来的数据，会被浏览器拦截，无法被网页获取到。
			解决方案：
				JSONP
					出现的早，兼容性好。是前端程序员为了解决跨域问题，被迫想出来的一种零时解决方案。
					缺点：只支持 get 请求，不支持 post 请求。
				CORS
					出现的较晚，它是 W3C 的标准，属于跨域 Ajax 请求的根本解决方案。主要是后端程序员进行配置。
					缺点：浏览器的兼容性不好。
	JSONP
		原理
			由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据，但是 <script> 标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本。
			因此，JSONP 的实现原理就是通过 <script> 标签的 src 属性，请求跨域的数据接口，并通过回调函数的形式，接收跨域接口响应回来的数据。
			********注意：JSONP 和 Ajax 之间没有任何关系，因为 JSONP 没有用到 XHR 这个对象。********
		封装 JSONP
			1、定义一个 success 回调函数；
				<script>
					function jQueryxxx(data) {
						console.log(data);
					}
				</script>
			2、通过 <script> 标签，请求数据接口。
				<script src="URL?callback=jQueryxxx&params=value"></script>
		经 jQuery 封装后的 JSONP
			jQuery 提供 的 $.ajax() 函数也可以发起 JSONP 数据请求。
			$.ajax({
				url: URL + '?params1=value1&params2=value2',
				dataType: 'jsonp',
				// 发送到服务端的参数名称，默认值为 callback。
				jsonp: 'callback',
				// 回调函数的名称，默认值为 jQueryxxx 格式。
				jsonpCallback: 'abc',
				success: function(res) {
					// res 就是 'jQueryxxx(params)'。params 就是客户端需要的 data 数据。
					res;
				}
			});
			默认情况下，使用 jQuery 发起 JSONP 请求时，会自动携带一个 callback=jQueryxxx 的函数，jQueryxxx 是随机生成的一个回调函数名称。
	CORS 技术（从 Express 复制而来）
		CORS 由一系列 HTTP 响应头字段组成，这些 HTTP 响应头字段决定了浏览器是否阻止前端 JS 的跨域获取资源。
		使用步骤：
			1、运行命令安装中间件；
				npm install cors
			2、使用 require() 方法导入中间件；
				const cors = require('cors');
			3、在路由之前使用 app.use() 方法注册中间件。
				app.use(cors());
			注意事项：
				1、CORS 主要在服务器进行配置，客户端无需做任何额外的配置；
				2、CORS 在浏览器中有兼容性，只有支持 XHRLevel2 的浏览器；（例如：IE10+、Chrome4+、FireFox3.5+ 等）
				3、CORS 跨域资源共享详解见：http://www.ruanyifeng.com/blog/2016/04/cors.html 。
		HTTP 响应头字
			Access-Control-Allow-Origin
				服务器可通过该字段的设置告诉客户端浏览器，可以允许哪些外域 URL 跨域请求资源。
				res.setHeader('Access-Control-Allow-Origin', 'URL' | '*');
					URL：表示允许指定的外域 URL 可以跨域请求资源;
					*：表示允许所有外域  URL 都可以跨域请求资源。
			Access-Control-Request-Headers
				服务器可通过该字段的设置告诉客户端浏览器，此响应头部中包含了普通响应头字段之外的特殊响应头字段。
				res.setHeader('Access-Control-Request-Headers', 'Content-Type, X-Custom-Header');
			Access-Control-Request-Method
				默认情况下 CORS 仅支持客户端发起的 GET、POST、HEAD 跨域请求。如果客户端有发起其他类型跨域请求的需要，则需要在服务器通过该字段进行设置。
				res.setHeader('Access-Control-Request-Method', 'GET, POST, DELETE, HEAD' | '*');
		注意：如果 Express 项目中配置了 CORS 中间件，为了防止冲突必须在 CORS 中间件之前声明 JSONP 接口。因为 Express 项目中配置了 CORS 中间件之后挂载的接口，都会被处理成是开启了 CORS 资源共享的接口。
	代理服务器
		前端项目中配置服务代理也可以解决跨域问题。这种方法不会出现 CORS 中的浏览器兼容问题。



防抖和节流
	防抖
		防抖策略（debounce）是当事件被触发后，延迟 n 秒再执行回调函数，如果在这 n 秒内事件又被触发，则重新计时。
		应用：搜索框。
		实现
			// 搜索框的防抖案例
			var data = {}
			var timer = null;
			function debounceFun(param) {
				timer = setTimeout(function() {
					tarFun(param);
				}, 500);
			}
			$('#search').on('keyup', function() {
				clearTimeout(timer);
				debounceFun(data);
			});	
	节流
		节流策略（throttle）可以减少一段时间内事件的触发频率。
		应用：
			1、鼠标连续不断地触发某事件（如点击、移动），只在单位时间内触发一次；
			2、懒加载时要监听滚动条的位置，可以降低滚动的频率，而不必浪费 CPU 的资源。
		节流阀原理
			1、节流阀为空，表示可以执行下一次操作；不为空，表示不能执行下一次操作；
			2、当前操作执行完，必须将节流阀重置为空，表示可以执行下一次操作了；
			3、每次执行操作前，必须判断节流阀是否为空。
		实现
			// 鼠标跟随的节流案例
			// 1、定义节流阀。
			var timer = null;
			$('selector').on('mousemove', function(e) {
				// 4、判断节流阀是否为空。
				if(timer) { return }
				// 2、开启延时器，打开节流阀。
				timer = setTimeout(function() {
					// TODO
					// 3、关闭节流阀。
					timer = null;
				}, 16);
			});
	区别
		防抖：如果事件被频繁触发，防抖能保证只有最后一次触发生效，前面 N 次的触发都会被忽略。
		节流：如果事件被频繁触发，节流能减少事件触发的频率，节流是有选择地执行一部分事件。

