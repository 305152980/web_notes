接口文档规范
	1、接口名称：用来标识各个接口的简单说明。如：登录接口、获取用户信息接口等。
	2、接口 URL：接口的调用地址。
	3、调用方式：接口的调用方式。如：GET 或 POST。
	4、接口参数：接口需要传递的参数。每个参数必须包含：参数名称、参数类型、是否必选、参数说明等 4 项内容。
	5、接口响应：接口返回值的详细描述。一般包含：数据名称、数据类型、数据说明等 3 项内容。
	6、响应示例（可选）。
XML 和 JSON
	XML 和 JSON 是数据在传输过程中常用的两种格式。
	XML
		缺点:
			1、格式臃肿，和数据无关的代码较多，传输效率偏低。
			2、在 JS 中解析 XML 比较麻烦。
	JSON
		优点：更小、更快、更易于解析。
		对象格式：{ "key1": value1, "key2": value2, ...... }
		数组格式：[value1, value2, value3, ......]
		格式要求：
			1、字符串数据用双引号包裹。
			2、value 的数据类型可以是数字、字符串、布尔值、null、数组、对象这 6 种。
			3、数据的最外层必须是对象或数组格式。
			4、不能使用 undefined 或函数作为 JSON 数据的值。
		JSON 对象与 JS 对象之间的转换
			var JS 对象 = JSON.parse(JSON 对象)		// JSON 序列化。
			var JSON 对象 = JSON.stringify(JS 对象)		// JSON 反序列化。



HTTP 请求
	请求消息
		HTTP 请求消息又叫做 HTTP 请求报文。
		HTTP 请求消息由请求行、请求头、空行和请求体 4 个部分组成。
		请求行：请求行由请求方式、URL 和 HTTP 协议版本 3 个部分组成。它们之间使用空格隔开。
		请求头：请求头由多行键值对组成，用来描述浏览器的基本信息。每行键与值之间使用英文冒号隔开。
			User-Agent：用来告诉服务器客户端使用的操作系统和浏览器的名称以及版本。
				User-Agent:Mozilla/......
			Referer：用来告诉服务器请求是从哪个页面发送过来的。
				Referer:https://www.baidu.com/?start=1
			Host：用来描述资源的Internet主机和端口号。通常从请求行的 URL 中提取而来。
				Host:www.baidu.com
			Accept：用来描述浏览器能够接收什么类型的资源。例如：图片、网页等。
				Accept:application/json
				Accept:*/*							浏览器可以处理所有类型的资源。一般浏览器发给服务器的都是这个。
			Accept-Language：用来描述浏览器期望接收哪种人类语言的文本资源。
			Content-Type：用来告诉服务器请求体的数据编码方式。
				Content-Type:application/json;charset=UTF-8			告诉服务器请求体的数据采用的是 JSON 格式，且采用 UTF-8 字符编码。一般的接口请求会使用该值。
				Content-Type:application/x-www-form-urlencoded			告诉服务器请求体的数据格式为 key1=value1&key2=value2。一般的表单提交会使用该值。
				Content-Type:multipart/form-data				一般需要上传文件的表单会使用该值。
			Connection：用来指定请求响应完毕后浏览器与服务器之间的 TCP 链接是否关闭。
				Connection:keep-alive
				Connection:close
			Cache-Control：用于资源的缓存控制。
			Range：用于资源的断点续传。
			Cookie
		空行：最后一个请求头键值对的后面是一个空行，用来告诉服务器请求头到此结束。
		请求体：请求体中存放的是提交到服务器的数据。只有 post 请求才有请求体。	
	响应消息
		HTTP 响应消息又叫做 HTTP 响应报文。
		HTTP 响应消息由状态行、响应头、空行和响应体 4 个部分组成。
		状态行：状态行由 HTTP 协议版本、状态码和状态码的描述文本 3 个部分组成。它们之间使用空格隔开。
		响应头：响应头由多行键值对组成，用来描述服务器的基本信息。每行键与值之间使用英文冒号隔开。
			Server：用来告诉浏览器服务器的类型和版本。
				Server：Tengine/1.4.6
			Date：用来描述服务器响应资源时的服务器时间。
				Date:Tue, 03 Apr 2020 03:52:28 GMT
			Content-Type：用来告诉浏览器资源的文件类型和字符编码。
				Content-Type:text/html;charset=UTF-8				告诉浏览器响应体中的数据采用的是 HTML 格式，且采用 UTF-8 字符编码。
			Last-Modified：用来描述资源最后被修改的日期。
				Last-Modified: Dec, 26 Dec 2019 17:30:00 GMT
			Connection：对应请求中的 Connection。
			Cache-Control：对应请求中的 Cache-Control。
		空行：最后一个响应头键值对的后面是一个空行，用来告诉浏览器响应头到此结束。
		响应体：响应体中存放的是服务器响应给客户端的资源。
	请求方法
		请求方法用来表明浏览器要对服务器上的资源所执行的操作。请求方法分为 get 请求和 post 请求等。
	响应状态码
		HTTP 响应状态码由三个十进制数字组成，第一个十进制数字定义了响应状态码的类型，后两个数字用来对响应状态码进行细分。
		1**：信息。表示服务器收到请求。需要请求者继续执行操作。
		2**：成功。表示请求被成功接收并处理。
			200 OK						请求成功。一般用于 get 和 post 请求。
			201 Created					请求成功并创建了新的资源。一般用于 post 和 put 请求。
		3**：重定向。表示服务器要求请求者重定向。需要请求者继续执行操作。
			301 Moved Permanently				永久移动。请求的资源被永久移动到新的 URL。返回的信息包括新的 URL。客户端接下来的请求应使用新的 URL。
			302 Found					临时移动。请求的资源被临时移动到新的 URL。返回的信息包括新的 URL。客户端接下来的请求应使用新的 URL。
			304 Not Modified				没有移动。请求的响应消息没有响应体，表示资源没有被移动。客户端接下来的请求应使用浏览器缓存的 URL。
		4**：客户端错误。表示请求中包含语法错误或非法内容，从而导致了这次响应的失败。
			400 Bad Request					请求的语法或参数有问题。
			401 Unauthorized				当前请求没有访问权限，需要进行身份认证。
			403 Forbidden					服务器已经理解请求，但是拒绝执行该任务。
			404 Not Found					服务器无法根据客户端的请求找到资源。
			408 Request Timeout				请求超时。服务器等待客户端发送的请求时间过长。
		5**：服务器错误。表示服务器在处理请求的过程中发生了错误。
			500 Internal Server				服务器内部错误，无法完成请求。
			501 Not Implemented				服务器不支持该请求方法。
			503 Service Unavailable				由于超载或系统维护，服务器暂时无法处理客户端的请求。
一次 HTTP 请求的完整过程
	1、根据浏览器中的 URL 请求和 DNS 域名服务器，解析出服务器的 IP 地址。
	2、浏览器对服务器发起 TCP 3 次握手。
	3、浏览器和服务器建立 TCP 链接后，浏览器向服务器发送 HTTP 请求报文。
	4、服务器将此 HTTP 请求的响应报文返回给浏览器。
	5、短链接的情况下，浏览器和服务器通过 TCP 四次挥手关闭链接；长链接的情况下，在浏览器没有访问服务器的若干时间后，他们的链接会自动关闭。
	6、浏览器解析出响应信息中的 HTML 代码， 并继续请求 HTML 代码中的资源（如：JS、CSS、图片等）。
	7、浏览器对此 HTML 代码进行页面渲染并呈现给用户。
HTTP 缓存控制
	强缓存
		资源在有效期内都有效，过了有效期就失效的缓存。
		如果命中了此种缓存，浏览器是不会向服务器发送请求的。
	协商缓存
		强缓存的资源过期后，浏览器向服务器发送请求。
		如果该资源没有变化，则服务器会响应浏览器代码 304，并重新将这个资源标一个过期时间。
		如果该资源已经变化，则服务器会响应浏览器代码 200，并返回新的资源。
			资源是否变化的判断依据之一是资源的最后修改日期。（日期会有精确度的问题，比如说一秒内修改多次。）
HTTP 的 keep-alive
	后期的 HTTP1.0 以及 HTTP1.1 中，在请求头中加入 Connection: keep-alive 字段，可以让请求响应完后自身链接不被关闭，下次还复用这次请求的链接进行会话通信。
	缺点：在请求结束后，本来可以释放的链接资源仍然被占用。
	解决办法：
		在请求头中加入 Keep-Alive: timeout = 5, max = 100。
		timeout：两次请求间的最大时间间隔。
		max：该链接最多被复用的次数。
HTTP2 相比 HTTP1.X 的优势
	特点：充分利用网络带宽，超级快。
	1、HTTP2 采用二进制格式传输数据，而 HTTP1.X 采用的是文本格式传输数据。二进制协议解析起来更高效。
	2、HTTP2 采用了一些头部压缩技术，减少了在请求头和响应头中重复携带的数据，降低了网络负担。
	3、HTTP2 采用了服务器推送方式，主动向客户端推送资源，提高了页面的加载效率。（用的比较少）
	4、HTTP2 采用了多路复用技术，减少了需要创建链接的数量，降低了资源占用和性能消耗。
		HTTP2 建立一个链接可以并发 n 个请求和响应，而 HTTP1.X 建立一个链接同一时间只能发送一个请求和响应。
		HTTP2 同一时间建立链接的数量远超 HTTP1.X 的 6 个。
HTTPS 协议
	1、什么是 HTTPS 协议？
		HTTP 协议通常承载于 TCP 协议之上，在 HTTP 协议和 TCP 协议之间添加一个安全协议层（SSL 或 TSL），这个时候就成了我们常说的 HTTPS 协议。
	2、为什么需要 HTTPS 协议？
		因为 HTTP 协议是明文传输的，数据容易被截取，而 HTTPS 协议会对某些敏感数据进行加密处理。
	3、HTTPS 协议是如何对数据进行加密的？
		HTTPS 协议采用的是“对称加密”和“非对称加密”相结合的方式对数据进行加密。
		敏感数据采用对称加密方式进行加密传输，对称加密的密钥采用非对称加密的方式进行加密传输。
	4、对称加密。
		对称加密采用的是同一个密钥进行加解密。加密成本低。
	5、非对称加密。
		非对称加密采用的是不同的密钥进行加解密。加密成本高。
	6、如何保证非对称加密公钥明文传输的安全性？
		数字证书（CA 证书），一般是 CA 机构颁发的，可以用来证明这个网站是否可靠。
		CA 证书中包含了网站的公钥、域名地址、证书的到期时间等信息。
		访问没有 CA 证书或者 CA 证书过期的网站，浏览器会发出警告。
		有了 CA 证书的服务器不会再响应明文的公钥给用户，而是响应 CA 证书给用户。
	7、数字签名。
		数字签名可以用来证明 CA 证书是否伪造或者被篡改。
		原理：数字签名是由 CA 证书里面的信息通过 hash 算法进行加密得来的一个唯一标识，可以理解为身份证的身份证号码。



XHR
	XMLHttpRequest 是浏览器提供的用于发送异步数据请求的 JS 对象。
	语法
		get 请求
			// 1、创建 XHR 对象。
			var xhr = new XMLHttpRequest()
			// 2、调用 open 函数。
			xhr.open('GET', URL + '?param=value')
			// 3、调用 send 函数。
			xhr.send()
			// 4、监听 onreadystatechange 事件。
			xhr.onreadystatechange = function() {
				// 4.1、监听 xhr 对象的请求状态 readyState 和服务器的响应状态 status。
				if(xhr.readyState === 4 && xhr.status === 200) {
					// 4.2、打印服务器响应回来的数据。
					console.log(xhr.responseText)
				}
			}
		post 请求
			// 1、创建 XHR 对象。
			var xhr = new XMLHttpRequest()
			// 2、调用 open 函数。
			xhr.open('POST', URL)
			// 3、设置请求头的 Content-Type 字段。
			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
			// 4、调用 send 函数。
			xhr.send('key1=value1&key2=value2&key3=value3')
			// 5、监听 onreadystatechange 事件。
			xhr.onreadystatechange = function() {
				// 5.1、监听 xhr 对象的请求状态 readyState 和服务器的相应状态 status。
				if(xhr.readyState === 4 && xhr.status === 200) {
					// 5.2、打印服务器响应回来的数据。
					console.log(xhr.responseText)
				}
			}
		xhr.readyState
			0：状态 unsent。					xhr 对象已被创建，但尚未调用 xhr.open 方法。
			1：状态 opened。					xhr.open 方法已经被调用。
			2：状态 headers_received。				xhr.send 方法已经被调用，响应头也已经被接收。
			3：状态 loading。					数据接收中。此时 xhr.responseText 中已经包含了部分数据。
			4：状态 done。						Ajax 请求完成。这意味着数据传输已经彻底完成或失败。
封装 Ajax 函数
	// data: { prop1: value1, prop2: value2, ...... }
	function resolveData(data) {
		var arr = []
		for (var k in data) {
			arr.push(k + '=' + data[k])
		}
		return arr.join('&')
	}
	// options: { url: '', method: '', data: {}, success: () => {}, error: () => {}, ...... }
	function myAjax(options) {
		var xhr = new XMLHttpRequest()
		var queryStr = resolveData(options.data)
		if(options.method.toUpperCase() === 'GET') {
			xhr.open(options.method, options.url + '?' + queryStr)
			xhr.send()
		} else if(options.method.toUpperCase() === 'POST') {
			xhr.open(options.method, options.url)
			xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
			xhr.send(queryStr)
		}
		xhr.onreadystatechange = function() {
			if(xhr.readyState === 4 && xhr.status === 200) {
				var result = JSON.parse(xhr.responseText)
				options.success(result)
			}
		}
	}
Ajax 的应用
	Form 表单
		Form 表单由表单标签、表单域、表单按钮三个部分组成。
		表单域包含文本框、密码框、隐藏域、多行文本、复选框、单选框、下拉选择框和文件上传框等。
	<form> 标签的属性
		action：指定向何处提交表单数据。
			默认值为当前页面的 URL。
		target：指定在何处打开 action URL 页面。
			_self：在原窗口中打开。默认值。
			_blank：在新窗口中打开。	
		method：指定以何种方式把表单数据提交到 action URL。
			get 或 post。
		enctype：告诉服务器表单数据采用何种编码格式。
			application/x-www-form-urlencoded：告诉服务器请求体的数据格式为 key1=value1&key2=value2。默认值。
			multipart/form-data：一般需要上传文件的表单会使用该值。
	Form 表单的同步提交问题
		定义：通过点击 submit 按钮触发表单的提交操作，从而使页面跳转到 action URL 的行为，叫做表单的同步提交问题。
		缺点：
			1、页面会发生跳转。
			2、之前页面的状态和数据会丢失。
		解决方案：表单只负责采集数据，然后用 Ajax 将数据提交到服务器。
			document.getElementById('#form').addEventListener('submit', (e) => {
				e.preventDefault()
				// 获取表单数据，使用 Ajax 发送请求。
				......
				this.reset()
			})
XHL Level2
	旧版 XHL 对象的缺点
		1、只支持文本数据的传输，无法用来上传和下载文件。
		2、传送和接收数据时，没有进度信息，只能提示有没有完成。
	新版 XHL 对象的优点
		1、可以设置 HTTP 请求的时限，超时即失败。
		2、可以使用 FormData 对象来管理表单数据。
		3、可以上传和下载文件。
		4、可以获得数据传输的进度信息。
	设置 HTTP 请求时限
		var xhr = new XMLHttpRequest()
		xhr.timeout = 3000
		xhr.ontimeout = function() { alert('请求超时！') }
	FormData 对象的应用
		示例一：
			var formData = new FormData()
			formData.append('key1', value1)
			formData.append('key2', value2)
			var xhr = new XMLHttpRequest()
			xhr.open('POST', URL)
			xhr.send(formData)
			xhr.onreadystatechange = function() {
				if(xhr.readyState === 4 && xhr.status === 200) {
					console.log(xhr.responseText)
				}
			}
		示例二：
			var form = document.querySelector('#form')
			form.addEventListener('submit', (e) => {
				e.preventDefault()
				var formData = new FormData(form)
				var xhr = new XMLHttpRequest()
				xhr.open('POST', URL)
				xhr.send(formData)
				xhr.onreadystatechange = function() {
					if(xhr.readyState === 4 && xhr.status === 200) {
						console.log(xhr.responseText)
					}
				}
				this.reset()
			})



Axios
	Axios 通过 Promise 实现了对 Ajax 的封装，是一个专注于网络数据请求的 JS 库。
	Axios 语法
		get 请求
			axios.get('url', {params: null})
			.then(res => {
				var result = res.data
				console.log(result)
			})
			.catch(error => { console.log(error) })
		post 请求
			axios.post('url', null)
			.then(res => {
				var result = res.data
				console.log(result)
			})
			.catch(error => { console.log(error) })
		axios 请求
			axios({
				method: '',
				url: '',
				data: null,				// GET 请求参数。
				params: null,				// POST 请求参数。
			})
			.then(res => {
				var result = res.data
				console.log(result)
			})
			.catch(error => { console.log(error) })
	Axios 实战
		npm install axios
		import axios from 'axios'
		// 创建一个 Axios 实例。
		const instance = axios.create({
			// npm run dev ==> /dev-api   npm run build ==> /prod-api
			baseURL: process.env.VUE_APP_BASE_API,
			// 请求的超时时间。
			timeout: 10000
		})
		// 请求工具函数。
		export default (url, method, submitData) => {
			return instance({
				url,
				method,
				[method.toLowerCase() === 'get' ? 'params' : 'data']: submitData
			})
		}



同源和跨域
	同源：如果请求方与响应方的协议、域名、端口号都相同，则请求方与响应方具有相同的源。
	跨域：跨域即非同源。
		浏览器允许发起跨域请求，但是跨域请求回来的数据会被浏览器拦截，而无法被请求方获取到。
	跨域的解决方案
		JSONP
			优点：出现的早，兼容性好。
			缺点：只支持 get 请求，不支持 post 请求。
		CORS
			优点：它是 W3C 的标准，属于跨域 Ajax 请求的根本解决方案。
			缺点：出现的较晚，兼容性不好。
		代理服务器
			优点：不会出现 CORS 中的浏览器兼容性问题。
			缺点：需要额外部署一台代理服务器。
	JSONP
		<script> 标签不受浏览器同源策略的影响，可以通过 <script> 标签的 src 属性，来请求与请求方非同源的资源。
		注意：JSONP 和 Ajax 之间没有任何关系，因为 JSONP 根本就没有用到 XHR 这个对象。
		原理：
			1、定义一个回调函数。
				<script>
					function callbackxxxxxx(data) {
						console.log(data)
					}
				</script>
			2、通过 <script> 标签的 src 属性，来请求与请求方非同源的资源。
				<script src="URL?callback=callbackxxxxxx&param=value"></script>
			3、服务器响应 JS 脚本资源给请求方，请求方运行这个 JS 脚本资源，JS 脚本会调用请求方的 callbackxxxxxx 函数，并为其传入 data 实参。至此请求方获得了想要的数据（资源）。
	CORS（从 Express 复制而来）
		CORS 由一系列的 HTTP 响应头字段组成，这些 HTTP 响应头字段决定了浏览器是否拦截跨域请求响应回来的资源。
		使用步骤：
			1、在项目所处的目录中执行如下命令安装中间件。
				npm install cors
			2、使用 require() 方法导入中间件。
				const cors = require('cors')
			3、在路由之前使用 app.use() 方法注册中间件。
				app.use(cors())
			注意：
				如果 Express 项目中配置了 CORS 中间件，为了防止冲突必须在 CORS 中间件之前声明 JSONP 接口。
				因为 Express 项目中配置了 CORS 中间件之后挂载的接口，都会被处理成是开启了 CORS 资源共享的接口。
		HTTP 响应头字段
			Access-Control-Allow-Origin
				服务器可以通过该字段告诉客户端的浏览器，对哪些外域 URL 跨域请求的响应消息进行放行。
				res.setHeader('Access-Control-Allow-Origin', 'URL' | '*')
					URL：表示对指定的外域 URL 跨域请求的响应消息进行放行。
					*：表示对所有的外域 URL 跨域请求的响应消息进行放行。
			Access-Control-Request-Headers
				服务器可以通过该字段告诉客户端的浏览器，响应消息的响应头中包含了普通响应头字段之外的哪些特殊字段。
				res.setHeader('Access-Control-Request-Headers', 'Content-Type, X-Custom-Header')
			Access-Control-Request-Method
				默认情况下 CORS 仅支持客户端发起的 GET、POST、HEAD 类型的跨域请求。如果客户端需要发起其他类型的跨域请求，则需要在服务器通过该字段来进行设置。
				res.setHeader('Access-Control-Request-Method', 'GET, POST, DELETE, HEAD' | '*')
		注意事项：
			1、CORS 主要在服务器进行配置，客户端无需做任何额外的配置。
			2、CORS 在浏览器中有兼容性问题，只有支持“XHR Level2”的浏览器。（例如：IE10+、Chrome4+、FireFox3.5+ 等。）
			3、CORS 跨域笔记详解见：http://www.ruanyifeng.com/blog/2016/04/cors.html 。



防抖和节流
	防抖
		防抖（debounce）：当某一事件被触发后，延迟 n 秒再执行回调逻辑；如果在这 n 秒内，该事件又被触发了，则取消执行该事件之前的回调逻辑。
		应用：搜索框连续输入文本。
		实现
			// 搜索框输入的防抖案例。
			var data = {}
			var timer = null
			function debounceFun(param) {
				timer = setTimeout(() => {
					targetFun(param)
				}, 500)
			}
			document.getElementById('#search').addEventListener('keyup', () => {
				clearTimeout(timer)
				debounceFun(data)
			})	
	节流
		节流（throttle）：如果某一事件被有效的触发了，那么在接下来的一段时间内，这个事件再次被触发时将不会去执行回调逻辑。
		原理：
			1、节流阀的起始状态为空。
			2、节流阀为空时，事件可以被有效的触发；节流阀为非空时，事件的触发将不会去执行回调逻辑。
			3、事件被有效的触发后，立即将节流阀置为非空；经过一定的时间间隔后，再将节流阀重置为空。
		应用：鼠标连续的点击或移动。
		实现
			// 鼠标跟随的节流案例。
			var data = {}
			var timer = null
			function throttleFun(param) {
				targetFun(param)
				timer = setTimeout(() => {
					timer = null
				}, 16)
			}
			document.querySelector('选择器').addEventListener('mousemove', () => {
				if(timer) { return }
				throttleFun(data)		
			})